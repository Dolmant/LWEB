["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@material-ui/core/ButtonBase/focusVisible.js"],"~:js","shadow$provide.module$node_modules$$material_ui$core$ButtonBase$focusVisible=function(c,d,a,f,b,g){function e(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1;void 0;void 0;a.focusVisibleTimeout=setTimeout(function(){var f=(0,q.default)(b);n.focusKeyPressed&&(f.activeElement===b||b.contains(f.activeElement))?c():d<a.focusVisibleMaxCheckTimes&&e(a,b,c,d+1)},a.focusVisibleCheckTime)}function k(a){return-1<p.indexOf((0,l.default)(a))}c=a(\"module$node_modules$$babel$runtime$helpers$builtin$interopRequireDefault\");\nObject.defineProperty(b,\"__esModule\",{value:!0});b.detectFocusVisible=e;b.listenForFocusKeys=function(a){a.addEventListener(\"keyup\",m)};var l=c(a(\"module$node_modules$keycode$index\"));c(a(\"module$node_modules$warning$warning\"));var q=c(a(\"module$node_modules$$material_ui$core$utils$ownerDocument\")),n={focusKeyPressed:!1,keyUpEventTimeout:-1},p=\"tab enter space esc up down left right\".split(\" \"),m=function(a){k(a)&&(n.focusKeyPressed=!0,clearTimeout(n.keyUpEventTimeout),n.keyUpEventTimeout=setTimeout(function(){n.focusKeyPressed=\n!1},1E3))}}","~:source","shadow$provide[\"module$node_modules$$material_ui$core$ButtonBase$focusVisible\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFocusVisible = detectFocusVisible;\nexports.listenForFocusKeys = listenForFocusKeys;\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"../utils/ownerDocument\"));\n\n//  weak\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = (0, _ownerDocument.default)(element);\n\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n}\n\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\n\nfunction isFocusKey(event) {\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 1e3);\n  }\n};\n\nfunction listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$builtin$interopRequireDefault","~$shadow.js","~$module$node_modules$warning$warning","~$module$node_modules$$material_ui$core$utils$ownerDocument","~$module$node_modules$keycode$index"]],"~:properties",["^5",["focusVisibleTimeout","keyUpEventTimeout","listenForFocusKeys","__esModule","value","focusKeyPressed","detectFocusVisible"]],"~:compiled-at",1534237702725,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$material_ui$core$ButtonBase$focusVisible.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAuCC,CAAvC,CAAqD,CAuB/IC,QAASA,EAAkB,CAACC,CAAD,CAAWC,CAAX,CAAoBC,CAApB,CAA8B,CACvD,IAAIC,EAA6B,CAAnB,CAAAC,SAAAC,OAAA,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,CACsE,KAAK,EACG,KAAK,EACrKJ,EAAAO,oBAAA,CAA+BC,UAAA,CAAW,QAAS,EAAG,CACpD,IAAIC,EAAM,CAAC,CAAA,CAAGC,CAAAC,QAAJ,EAA4BV,CAA5B,CAENW,EAAAC,gBAAJ,GAAiCJ,CAAAK,cAAjC,GAAuDb,CAAvD,EAAkEA,CAAAc,SAAA,CAAiBN,CAAAK,cAAjB,CAAlE,EACEZ,CAAA,EADF,CAEWC,CAFX,CAEqBH,CAAAgB,0BAFrB,EAGEjB,CAAA,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAsCC,CAAtC,CAAgDC,CAAhD,CAA0D,CAA1D,CANkD,CAAvB,CAQ5BH,CAAAiB,sBAR4B,CAJwB,CAiBzDC,QAASA,EAAU,CAACC,CAAD,CAAQ,CACzB,MAA2D,EAA3D,CAAOC,CAAAC,QAAA,CAAmB,CAAC,CAAA,CAAGC,CAAAX,QAAJ,EAAsBQ,CAAtB,CAAnB,CADkB,CArCvBI,CAAAA,CAAyB5B,CAAA,CAAQ,0EAAR,CAE7B6B;MAAAC,eAAA,CAAsB5B,CAAtB,CAA+B,YAA/B,CAA6C,CAC3C6B,MAAO,CAAA,CADoC,CAA7C,CAGA7B,EAAAE,mBAAA,CAA6BA,CAC7BF,EAAA8B,mBAAA,CA8CAA,QAA2B,CAACC,CAAD,CAAM,CAI/BA,CAAAC,iBAAA,CAAqB,OAArB,CAA8BC,CAA9B,CAJ+B,CA5CjC,KAAIR,EAAWC,CAAA,CAAuB5B,CAAA,CAAQ,mCAAR,CAAvB,CAEA4B,EAAA,CAAuB5B,CAAA,CAAQ,qCAAR,CAAvB,CAEf,KAAIe,EAAiBa,CAAA,CAAuB5B,CAAA,CAAQ,2DAAR,CAAvB,CAArB,CAGIiB,EAAW,CACbC,gBAAiB,CAAA,CADJ,CAEbkB,kBAAoB,EAFP,CAHf,CAuBIX,EAAa,wCAAA,MAAA,CAAA,GAAA,CAvBjB,CA6BIU,EAAmBA,QAAyB,CAACX,CAAD,CAAQ,CAClDD,CAAA,CAAWC,CAAX,CAAJ,GACEP,CAAAC,gBAGA,CAH2B,CAAA,CAG3B,CADAmB,YAAA,CAAapB,CAAAmB,kBAAb,CACA,CAAAnB,CAAAmB,kBAAA,CAA6BvB,UAAA,CAAW,QAAS,EAAG,CAClDI,CAAAC,gBAAA;AAA2B,CAAA,CADuB,CAAvB,CAE1B,GAF0B,CAJ/B,CADsD,CA5CuF;\",\n\"sources\":[\"node_modules/@material-ui/core/ButtonBase/focusVisible.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$material_ui$core$ButtonBase$focusVisible\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/builtin/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.detectFocusVisible = detectFocusVisible;\\nexports.listenForFocusKeys = listenForFocusKeys;\\n\\nvar _keycode = _interopRequireDefault(require(\\\"keycode\\\"));\\n\\nvar _warning = _interopRequireDefault(require(\\\"warning\\\"));\\n\\nvar _ownerDocument = _interopRequireDefault(require(\\\"../utils/ownerDocument\\\"));\\n\\n//  weak\\nvar internal = {\\n  focusKeyPressed: false,\\n  keyUpEventTimeout: -1\\n};\\n\\nfunction detectFocusVisible(instance, element, callback) {\\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\\n  instance.focusVisibleTimeout = setTimeout(function () {\\n    var doc = (0, _ownerDocument.default)(element);\\n\\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\\n      callback();\\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\\n      detectFocusVisible(instance, element, callback, attempt + 1);\\n    }\\n  }, instance.focusVisibleCheckTime);\\n}\\n\\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\\n\\nfunction isFocusKey(event) {\\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\\n}\\n\\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\\n  if (isFocusKey(event)) {\\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\\n\\n    clearTimeout(internal.keyUpEventTimeout);\\n    internal.keyUpEventTimeout = setTimeout(function () {\\n      internal.focusKeyPressed = false;\\n    }, 1e3);\\n  }\\n};\\n\\nfunction listenForFocusKeys(win) {\\n  // The event listener will only be added once per window.\\n  // Duplicate event listeners will be ignored by addEventListener.\\n  // Also, this logic is client side only, we don't need a teardown.\\n  win.addEventListener('keyup', handleKeyUpEvent);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"detectFocusVisible\",\"instance\",\"element\",\"callback\",\"attempt\",\"arguments\",\"length\",\"undefined\",\"focusVisibleTimeout\",\"setTimeout\",\"doc\",\"_ownerDocument\",\"default\",\"internal\",\"focusKeyPressed\",\"activeElement\",\"contains\",\"focusVisibleMaxCheckTimes\",\"focusVisibleCheckTime\",\"isFocusKey\",\"event\",\"FOCUS_KEYS\",\"indexOf\",\"_keycode\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"listenForFocusKeys\",\"win\",\"addEventListener\",\"handleKeyUpEvent\",\"keyUpEventTimeout\",\"clearTimeout\"]\n}\n"]