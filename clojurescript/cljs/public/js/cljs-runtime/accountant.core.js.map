{"version":3,"file":"accountant.core.js","sources":["accountant/core.cljs"],"mappings":";;;;;;;;AASA,yCAAA,zCAAO2G,0FACJnE,MAAMoE,YAAYzC;AACnB,oDAAKyC,yDAAYpE,7GAFnB;;AAIA,6CAAA,7CAAOwC,kGACJ4B,YAAYzC;AACb,oDAAK,AAAYA,+DAAU,AAAUA,6DAAU,AAAQA,hLAFzD;;AAIA,GAAA,QAAAH,uCAAAC,4CAAA0B;AAAA;AAAA,AAAA,AAAS1F,0BAAQ,iBAAM0B,cAAY,KAAAiE;AAAlB,AACE,AAAM,AAAIjE,4BAA4BqD;;AACtC,AAAM,AAAIrD,wBAAwBgF;;AAClC,YAAAjF,0BAAeN,OAAUO;;;AAE5C,uCAAA,vCAAO3B,sFACJqC,QAAQnC;AACT,IAAA6B,JAFF,cAGIM;IADFL,UAEE8E;cACA,VAHF7E;kBAGOzB;AAAL,AACE,IAAMgC,QAAM,AAAShC;AACnB,QAACN,4CAAAA,mDAAAA,TAAYsC,+BAAAA,7HADf;;;AAJJ,AAAA,0BAAAT,QAAAC,QAAAC,nCAAC3B;;AAOH;;;;qCAAA,rCAAOqE,kFAGJQ;AAHH,AAIE,oBAAM,iBAAArC,oBAAKqC;AAAL,AAAA,oBAAArC;AAAU,OAACM,6CAAE,AAAY+B,cAAMkB;;AAA/BvD;;;AACJ,yBAAA,lBAAeqC,PADjB;;AAAA;;;AAGF;;;;;;0EAKG3E,zCALH,jCAAOkG;;AAML,IAAM3D,OAAK,AAAC4B,mCAAmBnE,9CANjC;IAOQwC,QAAM,AAAcxC;IACpBqC,yBAAiB,iBAAAC,oBAAKC;AAAL,AAAA,oBAAAD;AAAA,IAAAA,wBAAUE;AAAV,AAAA,oBAAAF;AAAgB,sBAAIE,DAAM,OAAA,rBAAsBC;;AAAhDH;;;AAAAA;;;AAFvB,AAGE,oBAAID;AACFrC;;AACA,IAAA+G,qBAAkB,AAAc/G;AAAhC,AAAA,oBAAA+G;AAAA,AAAA,aAAAA,TAAWnD;AACT,cAAOA,dADT;;;;AAAA;;;;;;AAGN,gCAAA,hCAAO2C,wEAAYvF;AACjB,IAAMiB,QAAM,AAAWjB,ZADzB;AAEI,GAAU,AAACH,uBAAOoB,1BADpB;AACE;;AACE,QAAA,gDAASA,xDADX;;;AAGJ,mCAAA,nCAAOgE,8EAAejF;AACpB,IAAMF,WAAS,AAAcE,fAD/B;AAEI,GAAU,AAACH,uBAAOC,1BADpB;AACE;;AAAA,AACE,QAAA,gDAASA;;;AAEf;;;+CAAA,/CAAOb,sGAEJ4B,QAAQgD,mBAAavD;AACtB,IAAA3B,JAHF,cAIG0F;IADDzF,UAAA;IAAAC,UAGC;kBAAKG;AACH,IAAMqB,SAAO,AAAUrB,bADzB;IAEQD,SAAO,AAAUC;IACjB+D,WAAS,AAAW/D;IACpBoB,UAAQ,AAAUpB;IAClBgE,WAAS,AAAWhE;IACpBE,YAAU,AAAYF;IACtB6D,UAAQ,iBAAAC,mBAAIC;AAAJ,AAAA,oBAAAD;AAAAA;;AAAA,IAAAA,uBAAa1C;AAAb,AAAA,oBAAA0C;AAAAA;;AAAA,IAAAA,uBAAqBE;AAArB,AAAA,oBAAAF;AAAAA;;AAA8B5D;;;;;IACtCyC,YAAU,AAACuD,+BAAe7E;IAC1BkB,OAAK,6BAAA,eAAA,1BAAMI,WAAU,AAAQA;IAC7BK,cAAY,6BAAA,iBAAA,5BAAML,WAAU,AAAUA;IACtC3B,MAAI,AAAQyF,eAAIlE;IAChBR,OAAK,AAAUf;IACfiB,QAAM,AAACsE,8BAAWvF;IAClBF,WAAS,AAACmF,iCAAcjF;IACxBiD,gBAAc,6CAAKlC,kDAAKE,mDAAMnB;IAC9BoD,QAAM,AAAS7C;IACfa,OAAK,AAAYlB;IACjBD,OAAK,AAAUC;IACf4F,eAAaC;IACb1E,eAAaC;IACbsC,MAAIE;IACJH,wBAAsB,6CAAK,AAAYC,0DAAK,AAASA,uDAAK,AAAQA;AArBxE,AAsBE,oBAAM,iBAAApC,oBAAK,AAACG,cAAIoB;AAAV,AAAA,GAAAvB;4BACK,iBAAAS,cAAA,iFAAA,QAAA,pJADL,IAAAT;AACK,AAAA,QAAAS,4CAAAA,yDAAAA,fAAeC,qCAAAA;;AADpB,AAAA,oBAAAV;AAAA,IAAAA,wBAEK,oDAAA,pDAACM,6CAAE7C;AAFR,AAAA,GAAAuC;AAAA,IAAAA,wBAGK,AAACM,6CAAEV,KAAK0E;AAHb,AAAA,GAAAtE;4BAIK,EAAI,AAACG,cAAI1B,5CAJd,IAAAuB,mDAKS,AAACM,6CAAE,6CAAK7B,gBAAM,6CAAKoB;AAL5B,AAAA,GAAAG;AAMK,QAACuC,mDAAAA,yDAAAA,RAAa9C,qCAAAA;;AANnBO;;;AAAAA;;;AAAAA;;;AAAAA;;;AAAAA;;;AAAN,AAOE,GAAM,AAACqE,gDAAKlC,sBAAsBR;AAChC,AAAGpC,iBAAkBoC,cAAcC,/BADrC;;AAAA;;AAEA,AAAiBlE;;AACjB,oBAAMsB;AAAN,AACE,IAAAI,UAAsBG;IAAtBF,UAA8B,KAAAG,wBAAA,LAAQC;AAAtC,AAAA,iCAAAL,QAAAC,lCAACC;;AADH;;;AAVF;;;;AA1BL,AAAA,0BAAAjC,QAAAC,QAAAC,nCAACC;;AAuCH,GAAA,QAAA0D,uCAAAC,4CAAAC;AAAA;AAAA,AAAA,8BAAA,9BAASzC;;AACT,GAAA,QAAAuC,uCAAAC,4CAAAqD;AAAA;AAAA,AAAA,qCAAA,rCAASN;;AAET;;;;;;;;;6CAAA,qDAAAlB,lGAAMM;AAAN,AAAA,IAAAL,YAAAD;IAAAC,gBAAA,EAAA,EAAA,EAAA,CAAAA,aAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,gDAAA,WAAA,CAAAC,gCAAA,AAAAD,8BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,WAAAA;kBAAA,AAAAI,4CAAAJ,cAAA,xEAQW7F;yBARX,AAAAiG,4CAAAJ,cAAA,/EAQuBV;8BARvB,AAAAc,4CAAAJ,cAAA,pFAQoCjE;AAClC,uCAAA,vCAAiB7B,AATnB;;AAUE,sCAAA,tCAAgBA;;AAChB,mCAAA,nCAAaA;;AACb,AAAMwB,8BAA4BvB;;AAClC,AAAM8G,qCAA6B3B;;AACnC,AAACrF,qCAAqBC,wBAAQC;;AAC9B,OAACO,6CAA6BR,wBAAQoF,mBAAavD;;AAErD,iCAAA,jCAAM+B,0EAAapB;aACJ,4CAAA,WAAA8C,pEAAb,aAActE,TAARyE,JADR;AACe,AAAM,sBAAAH,fAACE;GAASD,eAAK/C,fAAN;IACtB+D,SAAO,AAACU,eAAKzE;IACbvB,QAAM,kDAAA,lDAACoF,sDAAY,AAACC,mDAAWb,OAAOc;AAC1C,yDAAA,lDAACzF,sDAAa,4CAAA,5CAACE,7DAHjB;kBAGgBD;AAAA,AAAM,yDAAA,IAAAA,tDAACD;;CAAgBG;;AAEzC,AAAA;;;iCAAA,yCAAAP,1EAAME;AAAN,AAAA,IAAAD,UAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,+DAAA,/DAAMD,0EAEFyC;AAFJ,AAEW,0EAAA,nEAACuD,6DAAUvD;;;AAFtB,AAAA,+DAAA,/DAAMzC,0EAGFyC,MAAMb;AAHV,AAIG,oBAAIhB;AACF,IAAMe,QAAM,AAAWvC;IACjBoD,YAAU,AAACuB,gBAAM,yDAAA,zDAACC,mDAAUrC;mBACf,mDAAwB,nDAAvBqB,fAAdH,8CAA2BK,AAAD;wBAAsBJ,EAAEC,RAARE;AAAL,AACE,oBAAIF;AACF,OAACkB,8CAAMhB,MAAMH,EAAEC;;AACfE;;;CAHf,mCAG0BrB;IACpDgB,cAAY,EAAI,AAACpC,uBAAOqC,qBAEV,oDAAA,PAAKJ,uDAAUI,1GADfJ;AAPpB,AASE,GAAI,AAACF,6CAAEC,UAAUC;AACf,OAAGrD,qCAAsBwD;;AACzB,OAAGxD,iCAAkBwD;;;AACzB,qBAAA,dAACsB;;;;AAjBN,AAAA,yDAAA,zDAAMlE;;AAAN,AAmBA,yCAAA,zCAAMqC;AAAN,AAAA;AAEE,IAAMX,OAAK,AAAA,AAAInB;IACTqB,QAAM,AAAA,AAAIrB;IACVD,OAAK,AAAA,AAAIC;AACb,oBAAIK,pBAHN;AAII,IAAA6D,UAAa,6CAAK/C,kDAAKE,mDAAMtB;AAA7B,AAAA,8HAAAmE,iDAAAA,vKAAC7D,4DAAAA,qEAAAA;;AACD,qBAAA,dAACsD","names":["accountant.core/dispatch-on-navigate","accountant.core/history","nav-handler","G__5787","G__5788","G__5789","goog.events/listen","button","e","accountant.core/prevent-reload-on-known-path","shift-key","var_args","G__5831","accountant.core/navigate!","js/Error","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p1__5829#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","pairs","hash","js/window","cljs.core/empty?","fragment","port","uri","accountant.core/nav-handler","goog/history.Html5History","transformer","alt-key","target","reload-same-path?","G__5781","G__5782","G__5783","G__5796","G__5799","goog.events/dispatchEvent","history","goog/history.Event","path","token","query","host","current-port","js/window.location.port","navigation-link?","and__4442__auto__","href","attrs","cljs.core/not","accountant.core/dispatch-current!","href-node","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","old-route","route","fexpr__5794","link-target","with-params","query-string","k","v","accountant.core/map->params","valid","cljs.core/reduce-kv","js/accountant","js/accountant.core","js/accountant.core.nav-handler","location","parent","any-key","or__4453__auto__","meta-key","ctrl-key","relative-href","title","accountant.core/get-href-attribute","cljs.core/first","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/console.error","accountant.core/transformer-retrieve-token","current-relative-href","loc","node","js/window.location","path-exists?","G__5843","p1__5824#","cljs.core/keys","cljs.core/name","params","js/accountant.core.history","goog/history.Html5History.TokenTransformer","js/document","p__5816","map__5819","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","accountant.core/configure-navigation!","js/Node.ELEMENT_NODE","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","values","accountant.core/uri->fragment","accountant.core/find-href-node","accountant.core/transformer-create-url","path-prefix","accountant.core.navigate_BANG_.cljs$core$IFn$_invoke$arity$2","goog.history.EventType/NAVIGATE","accountant.core/uri->query","accountant.core/path-exists?","goog/Uri","cljs.core/vals","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","current-host","js/window.location.hostname","js/accountant.core.path-exists?","temp__5457__auto__"],"sourcesContent":["(ns accountant.core\n  \"The only namespace in this library.\"\n  (:require [clojure.string :as str]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Event\n           goog.history.Html5History\n           goog.Uri))\n\n(defn- transformer-create-url\n  [token path-prefix location]\n  (str path-prefix token))\n\n(defn- transformer-retrieve-token\n  [path-prefix location]\n  (str (.-pathname location) (.-search location) (.-hash location)))\n\n(defonce history (let [transformer (goog.history.Html5History.TokenTransformer.)]\n                   (set! (.. transformer -retrieveToken) transformer-retrieve-token)\n                   (set! (.. transformer -createUrl) transformer-create-url)\n                   (Html5History. js/window transformer)))\n\n(defn- dispatch-on-navigate\n  [history nav-handler]\n  (events/listen\n    history\n    EventType/NAVIGATE\n    (fn [e]\n      (let [token (.-token e)]\n        (nav-handler token)))))\n\n(defn- get-href-attribute\n  \"Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil.\"\n  [node]\n  (when (and node (= (.-nodeType node) js/Node.ELEMENT_NODE))\n    (.getAttribute node \"href\")))\n\n(defn- find-href-node\n  \"Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if\n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element.\"\n  [e]\n  (let [href (get-href-attribute e)\n        attrs (.-attributes e)\n        navigation-link? (and href attrs (-> attrs (aget \"data-trigger\") not))]\n    (if navigation-link?\n      e\n      (when-let [parent (.-parentNode e)]\n        (recur parent)))))\n\n(defn- uri->query [uri]\n  (let [query (.getQuery uri)]\n    (when-not (empty? query)\n      (str \"?\" query))))\n\n(defn- uri->fragment [uri]\n  (let [fragment (.getFragment uri)]\n    (when-not (empty? fragment)\n      (str \"#\" fragment))))\n\n(defn- prevent-reload-on-known-path\n  \"Create a click handler that blocks page reloads for known routes\"\n  [history path-exists? reload-same-path?]\n  (events/listen\n   js/document\n   \"click\"\n   (fn [e]\n     (let [target (.-target e)\n           button (.-button e)\n           meta-key (.-metaKey e)\n           alt-key (.-altKey e)\n           ctrl-key (.-ctrlKey e)\n           shift-key (.-shiftKey e)\n           any-key (or meta-key alt-key ctrl-key shift-key)\n           href-node (find-href-node target)\n           href (when href-node (.-href href-node))\n           link-target (when href-node (.-target href-node))\n           uri (.parse Uri href)\n           path (.getPath uri)\n           query (uri->query uri)\n           fragment (uri->fragment uri)\n           relative-href (str path query fragment)\n           title (.-title target)\n           host (.getDomain uri)\n           port (.getPort uri)\n           current-host js/window.location.hostname\n           current-port js/window.location.port\n           loc js/window.location\n           current-relative-href (str (.-pathname loc) (.-query loc) (.-hash loc))]\n       (when (and (not any-key)\n                  (#{\"\" \"_self\"} link-target)\n                  (= button 0)\n                  (= host current-host)\n                  (or (not port)\n                      (= (str port) (str current-port)))\n                  (path-exists? path))\n         (when (not= current-relative-href relative-href) ;; do not add duplicate html5 history state\n           (. history (setToken relative-href title)))\n         (.preventDefault e)\n         (when reload-same-path?\n           (events/dispatchEvent history (Event. path true))))))))\n\n(defonce nav-handler nil)\n(defonce path-exists? nil)\n\n(defn configure-navigation!\n  \"Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA\"\n  [{:keys [nav-handler path-exists? reload-same-path?]}]\n  (.setUseFragment history false)\n  (.setPathPrefix history \"\")\n  (.setEnabled history true)\n  (set! accountant.core/nav-handler nav-handler)\n  (set! accountant.core/path-exists? path-exists?)\n  (dispatch-on-navigate history nav-handler)\n  (prevent-reload-on-known-path history path-exists? reload-same-path?))\n\n(defn map->params [query]\n  (let [params (map #(name %) (keys query))\n        values (vals query)\n        pairs (partition 2 (interleave params values))]\n    (str/join \"&\" (map #(str/join \"=\" %) pairs))))\n\n(defn navigate!\n  \"add a browser history entry. updates window/location\"\n  ([route] (navigate! route {}))\n  ([route query]\n   (if nav-handler\n     (let [token (.getToken history)\n           old-route (first (str/split token \"?\"))\n           query-string (map->params (reduce-kv (fn [valid k v]\n                                                  (if v\n                                                    (assoc valid k v)\n                                                    valid)) {} query))\n           with-params (if (empty? query-string)\n                         route\n                         (str route \"?\" query-string))]\n       (if (= old-route route)\n         (. history (replaceToken with-params))\n         (. history (setToken with-params))))\n     (js/console.error \"can't navigate! until configure-navigation! called\"))))\n\n(defn dispatch-current! []\n  \"Dispatch current URI path.\"\n  (let [path (-> js/window .-location .-pathname)\n        query (-> js/window .-location .-search)\n        hash (-> js/window .-location .-hash)]\n    (if nav-handler\n      (nav-handler (str path query hash))\n      (js/console.error \"can't dispatch-current until configure-navigation! called\"))))\n"]}