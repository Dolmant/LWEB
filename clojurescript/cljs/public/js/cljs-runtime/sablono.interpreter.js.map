{"version":3,"file":"sablono.interpreter.js","sources":["sablono/interpreter.cljc"],"mappings":"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","names":["children","type","props","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","js/React.createElement","sablono.interpreter/element-class","ctor","sablono.interpreter/wrapped-input","sablono.interpreter/wrap-form-element","this","cljs/core.Subvec","js-attrs","class","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/array?","sablono.interpreter/interpret-seq","x","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","state-value","element-value","sablono.interpreter/lazy-load-wrappers","sablono.interpreter/update-state","new-props","property","G__3867","element","handler","event","G__3856","G__3857","goog.object/get","js/ReactDOM.findDOMNode","sablono.interpreter/wrapped-textarea","sablono.interpreter/attributes","attrs","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sablono.interpreter/interpret","sablono.interpreter/wrapped-checked","next-state","sablono.interpreter/controlled-input?","state","js/React.Component","sablono.interpreter/element","cljs/core.PersistentVector","clojure.string/blank?","component","next-props","value","cljs/core.Cons","sablono.interpreter/create-element","cljs/core.List","sablono.interpreter/interpret-vec","G__3853","G__3854","goog/bind","sablono.util/element?","goog.object/set","sablono.interpreter/IInterpreter","G__3906","G__3907","G__3908","cljs.core/PROTOCOL_SENTINEL","G__3909","G__3910","G__3911","G__3875","and__4442__auto__","cljs.core/object?","goog/inherits","vec__3901","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","content","sablono.normalize/element","sablono.interpreter/wrapped-select","cljs/core.ChunkedCons","x3855","var_args","args__5146__auto__","len__5143__auto__","i__5144__auto__","argseq__5147__auto__","cljs.core/IndexedSeq","seq3889","G__3890","cljs.core/first","cljs.core/next","G__3891","self__5128__auto__","on-change","goog.object/getValueByKeys","G__3841","G__3842","G__3843","goog.object/extend","cljs/core.ChunkedSeq","temp__5457__auto__","cljs/core.LazySeq","cljs.core/clj->js","sablono.util/html-to-dom-attrs","G__3850","G__3851","G__3852","cljs/core.IndexedSeq","x__4797__auto__","m__4798__auto__","sablono/interpreter.interpret","goog/typeOf","cljs.core/missing-protocol","G__3863"],"sourcesContent":["(ns sablono.interpreter\n  (:require #?(:clj [om.dom :as dom])\n            #?(:cljs [goog.object :as object])\n            [clojure.string :as str]\n            [clojure.string :refer [blank? join]]\n            [sablono.normalize :as normalize]\n            [sablono.util :as util]))\n\n(defprotocol IInterpreter\n  (interpret [this] \"Interpret a Clojure data structure as a React fn call.\"))\n\n#?(:cljs (defn update-state\n           \"Updates the state of the wrapped input element.\"\n           [component next-props property value]\n           (let [on-change (object/getValueByKeys component \"state\" \"onChange\")\n                 next-state #js {}]\n             (object/extend next-state next-props #js {:onChange on-change})\n             (object/set next-state property value)\n             (.setState component next-state))))\n\n;; A hack to force input elements to always update itself immediately,\n;; without waiting for requestAnimationFrame.\n\n#?(:cljs\n   (defn wrap-form-element [element property]\n     (let [ctor (fn [props]\n                  (this-as this\n                    (set! (.-state this)\n                          (let [state #js {}]\n                            (->> #js {:onChange (goog.bind (object/get this \"onChange\") this)}\n                                 (object/extend state props))\n                            state))\n                    (.call js/React.Component this props)))]\n       (set! (.-displayName ctor) (str \"wrapped-\" element))\n       (goog.inherits ctor js/React.Component)\n       (specify! (.-prototype ctor)\n         Object\n         (onChange [this event]\n           (when-let [handler (.-onChange (.-props this))]\n             (handler event)\n             (update-state\n              this (.-props this) property\n              (object/getValueByKeys event \"target\" property))))\n\n         (componentWillReceiveProps [this new-props]\n           (let [state-value (object/getValueByKeys this \"state\" property)\n                 element-value (object/get (js/ReactDOM.findDOMNode this) property)]\n             ;; On IE, onChange event might come after actual value of\n             ;; an element have changed. We detect this and render\n             ;; element as-is, hoping that next onChange will\n             ;; eventually come and bring our modifications anyways.\n             ;; Ignoring this causes skipped letters in controlled\n             ;; components\n             ;; https://github.com/facebook/react/issues/7027\n             ;; https://github.com/reagent-project/reagent/issues/253\n             ;; https://github.com/tonsky/rum/issues/86\n             ;; TODO: Find a better solution, since this conflicts\n             ;; with controlled/uncontrolled inputs.\n             ;; https://github.com/r0man/sablono/issues/148\n             (if (not= (str state-value) (str element-value))\n               (update-state this new-props property element-value)\n               (update-state this new-props property (object/get new-props property)))))\n\n         (render [this]\n           (js/React.createElement element (.-state this))))\n       ctor)))\n\n#?(:cljs (def wrapped-input))\n#?(:cljs (def wrapped-checked))\n#?(:cljs (def wrapped-select))\n#?(:cljs (def wrapped-textarea))\n\n#?(:cljs (defn lazy-load-wrappers []\n           (when-not wrapped-textarea\n             (set! wrapped-input (wrap-form-element \"input\" \"value\"))\n             (set! wrapped-checked (wrap-form-element \"input\" \"checked\"))\n             (set! wrapped-select (wrap-form-element \"select\" \"value\"))\n             (set! wrapped-textarea (wrap-form-element \"textarea\" \"value\")))))\n\n(defn ^boolean controlled-input?\n  \"Returns true if `type` and `props` are used a controlled input,\n  otherwise false.\"\n  [type props]\n  #?(:cljs (and (object? props)\n                (case type\n                  \"input\"\n                  (or (exists? (.-checked props))\n                      (exists? (.-value props)))\n                  \"select\"\n                  (exists? (.-value props))\n                  \"textarea\"\n                  (exists? (.-value props))\n                  false))))\n\n#?(:cljs\n   (defn element-class\n     \"Returns either `type` or a wrapped element for controlled\n     inputs.\"\n     [type props]\n     (if (controlled-input? type props)\n       (do (lazy-load-wrappers)\n           (case type\n             \"input\"\n             (case (and (object? props) (.-type props))\n               \"radio\" wrapped-checked\n               \"checkbox\" wrapped-checked\n               wrapped-input)\n             \"select\" wrapped-select\n             \"textarea\" wrapped-textarea\n             type))\n       type)))\n\n(defn create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type props & children]\n  #?(:clj (dom/element\n           {:attrs props\n            :children children\n            :react-key nil\n            :tag type})\n     :cljs (apply js/React.createElement (element-class type props) props children)))\n\n(defn attributes [attrs]\n  #?(:clj (-> (util/html-to-dom-attrs attrs)\n              (update :className #(some->> % (str/join \" \"))))\n     :cljs (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n             (let [class (.-className js-attrs)\n                   class (if (array? class) (join \" \" class) class)]\n               (if (blank? class)\n                 (js-delete js-attrs \"className\")\n                 (set! (.-className js-attrs) class))\n               js-attrs))))\n\n(defn- interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (into [] (map interpret) x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (apply create-element type\n           (attributes attrs)\n           (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(extend-protocol IInterpreter\n\n  #?(:clj clojure.lang.ChunkedCons\n     :cljs cljs.core.ChunkedCons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq\n     :cljs cljs.core.ChunkedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.Cons\n     :cljs cljs.core.Cons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.IndexedSeq\n     :cljs cljs.core.IndexedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.APersistentVector$SubVector\n     :cljs cljs.core.Subvec)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj Object :cljs default)\n  (interpret [this]\n    this)\n\n  nil\n  (interpret [this]\n    nil))\n"]}