{"version":3,"file":"rum.derived_atom.js","sources":["rum/derived_atom.cljc"],"mappings":"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","names":["map__3868","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","ref","check-equals?","cljs.core/deref","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","sink","new-val","seq__3897","cljs.core/seq","chunk__3898","count__3899","i__3900","temp__5457__auto__","cljs.core/chunked-seq?","c__4947__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","refs","key","f","G__3892","cljs.core/reset!","recalc","cljs.core.map.cljs$core$IFn$_invoke$arity$2","_","opts","cljs.core/add-watch","watch","var_args","G__3865","rum.derived-atom/derived-atom","js/Error","a","vec__3881","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","c","b","G__3884","G__3885","G__3886","vec__3876","G__3879","G__3880","G__3870","rum.derived_atom.derived_atom.cljs$core$IFn$_invoke$arity$4","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","vec__3871","G__3874"],"sourcesContent":["(ns rum.derived-atom)\n\n\n(defn derived-atom\n  ([refs key f]\n    (derived-atom refs key f {}))\n  ([refs key f opts]\n    (let [{ :keys [ref check-equals?]\n            :or { check-equals? true }} opts\n          recalc (case (count refs)\n                   1 (let [[a] refs] #(f @a))\n                   2 (let [[a b] refs] #(f @a @b))\n                   3 (let [[a b c] refs] #(f @a @b @c))\n                   #(apply f (map deref refs)))\n          sink   (if ref\n                   (doto ref (reset! (recalc)))\n                   (atom (recalc)))\n          watch  (if check-equals?\n                   (fn [_ _ _ _]\n                     (let [new-val (recalc)]\n                       (when (not= @sink new-val)\n                         (reset! sink new-val))))\n                   (fn [_ _ _ _]\n                     (reset! sink (recalc))))]\n      (doseq [ref refs]\n        (add-watch ref key watch))\n      sink)))\n"]}