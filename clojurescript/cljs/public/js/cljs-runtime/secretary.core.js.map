{"version":3,"file":"secretary.core.js","sources":["secretary/core.cljs"],"mappings":"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","names":["this","cljs.core/filterv","secretary.core/encode-query-params","query-params","secretary.core/*routes*","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","params","cljs.core.map.cljs$core$IFn$_invoke$arity$2","secretary.core/decode","ms","parsed-path","path","secretary.core/parse-path","cljs.core/deref","cljs.core/some","v","p__5858","vec__5859","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ik","iv","vec__5920","vec__5923","s","r","p","secretary.core/lex*","clauses","secretary.core.key_index.cljs$core$IFn$_invoke$arity$2","k","i","x","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","secretary.core/re-escape-chars","secretary.core/prefix","secretary.core/key-parse","uri","cljs.core/empty?","invalid","lookup","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","$1","encoded","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","secretary.core/decode-query-params","orig-route","goog.object/set","secretary.core/IRouteValue","G__6034","secretary.core/route-value","G__6035","G__6036","cljs.core/PROTOCOL_SENTINEL","secretary.core/encode-pair","p__5845","vec__5846","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","secretary.core/params-valid?","validations","parts","cljs.core/re-seq","index-re","secretary.core/encode-uri","m","route-string","js/RegExp","index","obj","p__5907","vec__5908","re","action","secretary.core/get-config","vec__5932","rs","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","p__5810","vec__5811","hs","secretary.core/re-escape","query-string","route","cljs.core/re-matches","part","js/parseInt","vec__5888","secretary.core/compile-route","secretary.core/locate-route-value","cljs.core/last","h","secretary.core/re-matches*","cljs.core/PersistentVector","c","cljs.core/name","heads","compiled-route","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","value","cljs.core.get.cljs$core$IFn$_invoke$arity$2","key","secretary.core/render-route","cljs.core/sequential?","cljs.core/set?","js/secretary","js/secretary.core","js/secretary.core.t_secretary$core5938","secretary.core/t_secretary$core5938","_5940","meta5939","this__4742__auto__","writer__4743__auto__","opt__4744__auto__","cljs.core/-write","secretary.core/->t_secretary$core5938","or__4453__auto__","cljs.core/map?","cljs.core/native-satisfies?","cljs.core/IRecord","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector","p__6062","vec__6063","seq__6064","first__6065","cljs.core/first","cljs.core/next","vec__6066","seq__6067","first__6068","p__5869","vec__5870","cljs.core/reset!","temp__5455__auto__","and__4442__auto__","secretary.core/set-config!","secretary.core/invalid-params","xs","cljs.core.take.cljs$core$IFn$_invoke$arity$2","secretary.core.render_route.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","var_args","args__5146__auto__","len__5143__auto__","i__5144__auto__","argseq__5147__auto__","cljs.core/IndexedSeq","secretary.core/render-route*","seq5959","G__5960","self__5128__auto__","args","secretary.core/lex-route","clojure.string/replace","cljs.core/re-pattern","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","secretary.core/encode","js/encodeURIComponent","uri-path","secretary.core/uri-with-leading-slash","p__6037","vec__6038","seq__6039","first__6040","vec__6042","seq__6043","first__6044","cljs.core/vec","cljs.core/cons","val","secretary.core/*config*","a","secretary.core/IRenderRoute","pattern","G__6054","G__6055","G__6056","_","validation","cljs.core/set","vec__5995","map__5998","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","secretary.core/uri-without-prefix","secretary.core/dispatch!","vec__5895","clojure.string.split.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","secretary.core/route-matches","pair","cljs.core/coll?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/butlast","cljs.core/conj","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","js/decodeURIComponent","secretary.core/reset-routes!","temp__5457__auto__","vec__5947","seq__5948","first__5949","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p__5878","vec__5879","clojure.walk/keywordize-keys","cljs.core/assoc-in","p__5977","vec__5978","secretary.core/locate-route","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","map__6057","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__6020","vec__6022","seq__6023","first__6024","vec__6025","seq__6026","first__6027","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__5873","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p__5853","vec__5854","x__4797__auto__","m__4798__auto__","secretary/core.route-value","goog/typeOf","cljs.core/missing-protocol","secretary.core/IRouteMatches","G__6014","G__6015","G__6016","cljs.core/vector?","secretary.core/add-route!","vec__6017","seq__6018","first__6019","G__5793","js/Error","secretary/core.render-route","p__6003","vec__6004","G__5834","secretary.core/key-index","cljs.core/identity","p__5984","vec__5985","replacement","secretary.core/assoc-in-query-params","vec__5912","cljs.core/re-find","secretary.core/remove-route!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","G__5867","js/secretary.core.encode-pair","method-table__5016__auto__","prefer-table__5017__auto__","method-cache__5018__auto__","cached-hierarchy__5019__auto__","hierarchy__5020__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","secretary.core.key_index.cljs$core$IFn$_invoke$arity$1","secretary/core.route-matches"],"sourcesContent":["(ns secretary.core\n  (:require [clojure.string :as string]\n            [clojure.walk :refer [keywordize-keys]])\n  (:require-macros [secretary.core :refer [defroute]]))\n\n;;----------------------------------------------------------------------\n;; Protocols\n\n(defprotocol IRouteMatches\n  (route-matches [this route]))\n\n(defprotocol IRouteValue\n  (route-value [this]))\n\n(defprotocol IRenderRoute\n  (render-route\n    [this]\n    [this params]))\n\n;;----------------------------------------------------------------------\n;; Configuration\n\n(def ^:dynamic *config*\n  (atom {:prefix \"\"}))\n\n(defn get-config\n  \"Gets a value for *config* at path.\"\n  [path]\n  (let [path (if (sequential? path) path [path])]\n    (get-in @*config* path)))\n\n(defn set-config!\n  \"Associates a value val for *config* at path.\"\n  [path val]\n  (let [path (if (sequential? path) path [path])]\n    (swap! *config* assoc-in path val)))\n\n;;----------------------------------------------------------------------\n;; Parameter encoding\n\n(def encode js/encodeURIComponent)\n\n(defmulti\n  ^{:private true\n    :doc \"Given a key and a value return and encoded key-value pair.\"}\n  encode-pair\n  (fn [[k v]]\n    (cond\n     (or (sequential? v) (set? v))\n     ::sequential\n     (or (map? v) (satisfies? IRecord v))\n     ::map)))\n\n(defn- key-index\n  ([k] (str (name k) \"[]\"))\n  ([k index]\n     (str (name k) \"[\" index \"]\")))\n\n(defmethod encode-pair ::sequential [[k v]]\n  (let [encoded (map-indexed\n                 (fn [i x]\n                   (let [pair (if (coll? x)\n                                [(key-index k i) x]\n                                [(key-index k) x])]\n                     (encode-pair pair)))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair ::map [[k v]]\n  (let [encoded (map\n                 (fn [[ik iv]]\n                   (encode-pair [(key-index k (name ik)) iv]))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair :default [[k v]]\n  (str (name k) \\= (encode (str v))))\n\n(defn encode-query-params\n  \"Convert a map of query parameters into url encoded string.\"\n  [query-params]\n  (string/join \\& (map encode-pair query-params)))\n\n(defn encode-uri\n  \"Like js/encodeURIComponent excepts ignore slashes.\"\n  [uri]\n  (->> (string/split uri #\"/\")\n       (map encode)\n       (string/join \"/\")))\n\n;;----------------------------------------------------------------------\n;; Parameter decoding\n\n(def decode js/decodeURIComponent)\n\n(defn- parse-path\n  \"Parse a value from a serialized query-string key index. If the\n  index value is empty 0 is returned, if it's a digit it returns the\n  js/parseInt value, otherwise it returns the extracted index.\"\n  [path]\n  (let [index-re #\"\\[([^\\]]*)\\]*\" ;; Capture the index value.\n        parts (re-seq index-re path)]\n    (map\n     (fn [[_ part]]\n       (cond\n        (empty? part) 0\n        (re-matches #\"\\d+\" part) (js/parseInt part)\n        :else part))\n     parts)))\n\n(defn- key-parse\n  \"Return a key path for a serialized query-string entry.\n\n  Ex.\n\n    (key-parse \\\"foo[][a][][b]\\\")\n    ;; => (\\\"foo\\\" 0 \\\"a\\\" 0 \\\"b\\\")\n  \"\n  [k]\n  (let [re #\"([^\\[\\]]+)((?:\\[[^\\]]*\\])*)?\"\n        [_ key path] (re-matches re k)\n        parsed-path (when path (parse-path path))]\n    (cons key parsed-path)))\n\n(defn- assoc-in-query-params\n  \"Like assoc-in but numbers in path create vectors instead of maps.\n\n  Ex.\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0] 1)\n    ;; => {\\\"foo\\\" [1]}\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0 \\\"a\\\"] 1)\n    ;; => {\\\"foo\\\" [{\\\"a\\\" 1}]}\n  \"\n  [m path v]\n  (let [heads (fn [xs]\n                (map-indexed\n                 (fn [i _]\n                   (take (inc i) xs))\n                 xs))\n        hs (heads path)\n        m (reduce\n           (fn [m h]\n             (if (and (or (number? (last h)))\n                      (not (vector? (get-in m (butlast h)))))\n               (assoc-in m (butlast h) [])\n               m))\n           m\n           hs)]\n    (if (zero? (last path))\n      (update-in m (butlast path) conj v)\n      (assoc-in m path v))))\n\n(defn decode-query-params\n  \"Extract a map of query parameters from a query string.\"\n  [query-string]\n  (let [parts (string/split query-string #\"&\")\n        params (reduce\n                (fn [m part]\n                  ;; We only want two parts since the part on the right hand side\n                  ;; could potentially contain an =.\n                  (let [[k v] (string/split part #\"=\" 2)]\n                    (assoc-in-query-params m (key-parse k) (decode v))))\n                {}\n                parts)\n        params (keywordize-keys params)]\n    params))\n\n;;----------------------------------------------------------------------\n;; Route compilation\n\n;; The implementation for route compilation was inspired by Clout and\n;; modified to suit JavaScript and Secretary.\n;; SEE: https://github.com/weavejester/clout\n\n(defn- re-matches*\n  \"Like re-matches but result is a always vector. If re does not\n  capture matches then it will return a vector of [m m] as if it had a\n  single capture. Other wise it maintains consistent behavior with\n  re-matches. \"\n  [re s]\n  (let [ms (clojure.core/re-matches re s)]\n    (when ms\n      (if (sequential? ms) ms [ms ms]))))\n\n(def ^:private re-escape-chars\n  (set \"\\\\.*+|?()[]{}$^\"))\n\n(defn- re-escape [s]\n (reduce\n  (fn [s c]\n    (if (re-escape-chars c)\n      (str s \\\\ c)\n      (str s c)))\n  \"\"\n  s))\n\n(defn- lex*\n  \"Attempt to lex a single token from s with clauses. Each clause is a\n  pair of [regexp action] where action is a function. regexp is\n  expected to begin with ^ and contain a single capture. If the\n  attempt is successful a vector of [s-without-token (action capture)]\n  is returned. Otherwise the result is nil.\"\n  [s clauses]\n  (some\n   (fn [[re action]]\n     (when-let [[m c] (re-find re s)]\n       [(subs s (count m)) (action c)]))\n   clauses))\n\n(defn- lex-route\n  \"Return a pair of [regex params]. regex is a compiled regular\n  expression for matching routes. params is a list of route param\n  names (:*, :id, etc.). \"\n  [s clauses]\n  (loop [s s pattern \"\" params []]\n    (if (seq s)\n      (let [[s [r p]] (lex* s clauses)]\n        (recur s (str pattern r) (conj params p)))\n      [(re-pattern (str \\^ pattern \\$)) (remove nil? params)])))\n\n(defn- compile-route\n  \"Given a route return an instance of IRouteMatches.\"\n  [orig-route]\n  (let [clauses [[#\"^\\*([^\\s.:*/]*)\" ;; Splats, named splates\n                  (fn [v]\n                    (let [r \"(.*?)\"\n                          p (if (seq v)\n                              (keyword v)\n                              :*)]\n                      [r p]))]\n                 [#\"^\\:([^\\s.:*/]+)\" ;; Params\n                  (fn [v]\n                    (let [r \"([^,;?/]+)\"\n                          p (keyword v)]\n                      [r p]))]\n                 [#\"^([^:*]+)\" ;; Literals\n                  (fn [v]\n                    (let [r (re-escape v)]\n                      [r]))]]\n       [re params] (lex-route orig-route clauses)]\n   (reify\n     IRouteValue\n     (route-value [this] orig-route)\n\n     IRouteMatches\n     (route-matches [_ route]\n       (when-let [[_ & ms] (re-matches* re route)]\n         (->> (interleave params (map decode ms))\n              (partition 2)\n              (merge-with vector {})))))))\n\n;;----------------------------------------------------------------------\n;; Route rendering\n\n(defn ^:internal render-route* [obj & args]\n  (when (satisfies? IRenderRoute obj)\n    (apply render-route obj args)))\n\n;;----------------------------------------------------------------------\n;; Routes adding/removing\n\n(def ^:dynamic *routes*\n  (atom []))\n\n(defn add-route! [obj action]\n  (let [obj (if (string? obj)\n              (compile-route obj)\n              obj)]\n    (swap! *routes* conj [obj action])))\n\n(defn remove-route! [obj]\n  (swap! *routes*\n         (fn [rs]\n           (filterv\n            (fn [[x _]]\n              (not= x obj))\n            rs))))\n\n(defn reset-routes! []\n  (reset! *routes* []))\n\n;;----------------------------------------------------------------------\n;; Route lookup and dispatch\n\n(defn locate-route [route]\n  (some\n   (fn [[compiled-route action]]\n     (when-let [params (route-matches compiled-route route)]\n       {:action action :params params :route compiled-route}))\n   @*routes*))\n\n(defn locate-route-value\n  \"Returns original route value as set in defroute when passed a URI path.\"\n  [uri]\n  (-> uri locate-route :route route-value))\n\n(defn- prefix\n  []\n  (str (get-config [:prefix])))\n\n(defn- uri-without-prefix\n  [uri]\n  (string/replace uri (re-pattern (str \"^\" (prefix))) \"\"))\n\n(defn- uri-with-leading-slash\n  \"Ensures that the uri has a leading slash\"\n  [uri]\n  (if (= \"/\" (first uri))\n    uri\n    (str \"/\" uri)))\n\n(defn dispatch!\n  \"Dispatch an action for a given route if it matches the URI path.\"\n  [uri]\n  (let [[uri-path query-string] (string/split (uri-without-prefix uri) #\"\\?\")\n        uri-path (uri-with-leading-slash uri-path)\n        query-params (when query-string\n                       {:query-params (decode-query-params query-string)})\n        {:keys [action params]} (locate-route uri-path)\n        action (or action identity)\n        params (merge params query-params)]\n    (action params)))\n\n(defn invalid-params [params validations]\n  (reduce (fn [m [key validation]]\n            (let [value (get params key)]\n              (if (re-matches validation value)\n                m\n                (assoc m key [value validation]))))\n          {} (partition 2 validations)))\n\n(defn- params-valid? [params validations]\n  (empty? (invalid-params params validations)))\n\n;;----------------------------------------------------------------------\n;; Protocol implementations\n\n(extend-protocol IRouteMatches\n  string\n  (route-matches [this route]\n    (route-matches (compile-route this) route))\n\n  js/RegExp\n  (route-matches [this route]\n    (when-let [[_ & ms] (re-matches* this route)]\n      (vec ms)))\n\n  cljs.core/PersistentVector\n  (route-matches [[route-string & validations] route]\n    (let [params (route-matches (compile-route route-string) route)]\n      (when (params-valid? params validations)\n        params))))\n\n(extend-protocol IRouteValue\n  string\n  (route-value [this]\n    (route-value (compile-route this)))\n\n  js/RegExp\n  (route-value [this] this)\n\n  cljs.core/PersistentVector\n  (route-value [[route-string & validations]]\n    (vec (cons (route-value route-string) validations))))\n\n(extend-protocol IRenderRoute\n  string\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([this params]\n       (let [{:keys [query-params] :as m} params\n             a (atom m)\n             path (.replace this (js/RegExp. \":[^\\\\s.:*/]+|\\\\*[^\\\\s.:*/]*\" \"g\")\n                            (fn [$1]\n                              (let [lookup (keyword (if (= $1 \"*\")\n                                                      $1\n                                                      (subs $1 1)))\n                                    v (get @a lookup)\n                                    replacement (if (sequential? v)\n                                                  (do\n                                                    (swap! a assoc lookup (next v))\n                                                    (encode-uri (first v)))\n                                                  (if v (encode-uri v) $1))]\n                                replacement)))\n             path (str (get-config [:prefix]) path)]\n         (if-let [query-string (and query-params\n                                    (encode-query-params query-params))]\n           (str path \"?\" query-string)\n           path))))\n\n  cljs.core/PersistentVector\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([[route-string & validations] params]\n       (let [invalid (invalid-params params validations)]\n         (if (empty? invalid)\n           (render-route route-string params)\n           (throw (ex-info \"Could not build route: invalid params\" invalid)))))))\n"]}