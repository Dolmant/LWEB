{"version":3,"file":"sablono.normalize.js","sources":["sablono/normalize.cljc"],"mappings":"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","names":["sablono.normalize/attributes","G__3809","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","sablono.normalize/class","maps","tag-attrs","x","G__3822","sablono.normalize/children","cljs.core/first","cljs.core/Symbol","tag","cljs.core/set?","class","clojure.string/replace","s","cljs.core/Keyword","cljs.core/name","var_args","args__5146__auto__","len__5143__auto__","i__5144__auto__","argseq__5147__auto__","cljs.core/IndexedSeq","sablono.normalize/merge-with-class","seq3810","self__5129__auto__","cljs.core/seq","cljs.core/sequential?","attrs","matches","cljs.core/rest","tag-name","cljs.core/List","p1__3807#","content","sablono.normalize/match-tag","p__3823","vec__3824","seq__3825","first__3826","cljs.core/next","sablono.normalize/element","sablono.normalize/compact-map","id","names","cljs.core/list?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core/every?","vec__3817","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/re-seq","cljs.core.into.cljs$core$IFn$_invoke$arity$3","sablono.normalize/class-name","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sablono.normalize/attrs?","map-attrs","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/not","sablono.util/element?","vec__3827","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","p__3802","vec__3803","_","v","cljs.core/empty?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sablono.normalize/strip-css","cljs.core/some","p1__3815#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","sablono.normalize/map-lookup?","classes","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__3821","fexpr__3820","cljs.core/ffirst","m","G__3811","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","cljs.core/count","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__3816#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","sablono.normalize.merge_with_class.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec"],"sourcesContent":["(ns sablono.normalize\n  (:refer-clojure :exclude [class])\n  (:require #?(:clj [om.next.protocols :as p])\n            #?(:clj [om.dom :as dom])\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [sablono.util :as util]))\n\n(defn compact-map\n  \"Removes all map entries where the value of the entry is empty.\"\n  [m]\n  (when m\n    (into {}\n          (remove (fn [[_ v]] (empty? v)))\n          m)))\n\n(defn class-name\n  [x]\n  (cond\n    (string? x) x\n    (keyword? x) (name x)\n    :else x))\n\n(defn map-lookup?\n  \"Returns true if `x` is a map lookup form, otherwise false.\"\n  [x]\n  (and (list? x) (keyword? (first x))))\n\n(defn class\n  \"Normalize `class` into a vector of classes.\"\n  [class]\n  (cond\n    (nil? class)\n    nil\n\n    (map-lookup? class)\n    [class]\n\n    (list? class)\n    (if (symbol? (first class))\n      [class]\n      (map class-name class))\n\n    (symbol? class)\n    [class]\n\n    (string? class)\n    [class]\n\n    (keyword? class)\n    [(class-name class)]\n\n    (and (or (set? class)\n             (sequential? class))\n         (every? #(or (keyword? %)\n                      (string? %))\n                 class))\n    (mapv class-name class)\n\n    (and (or (set? class)\n             (sequential? class)))\n    (mapv class-name class)\n\n    :else class))\n\n(defn attributes\n  \"Normalize the `attrs` of an element.\"\n  [attrs]\n  (cond-> attrs\n    (:class attrs)\n    (update-in [:class] class)))\n\n(defn merge-with-class\n  \"Like clojure.core/merge but concatenate :class entries.\"\n  [& maps]\n  (let [maps (map attributes maps)\n        classes (mapcat :class maps)]\n    (when (seq maps)\n      (cond-> (reduce into {} maps)\n        (not (empty? classes))\n        (assoc :class (vec classes))))))\n\n(defn strip-css\n  \"Strip the # and . characters from the beginning of `s`.\"\n  [s]\n  (when s\n    (str/replace s #\"^[.#]\" \"\")))\n\n(defn match-tag\n  \"Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes.\"\n  [s]\n  (let [matches (re-seq #\"[#.]?[^#.]+\" (name s))\n        [tag-name names]\n        (cond (empty? matches)\n              (throw (ex-info (str \"Can't match CSS tag: \" s) {:tag s}))\n\n              (#{\\# \\.} (ffirst matches)) ;; shorthand for div\n              [\"div\" matches]\n\n              :default\n              [(first matches) (rest matches)])]\n    [tag-name\n     (strip-css (some #(when (= \\# (first %1)) %1)  names))\n     (into []\n           (comp (filter #(= \\. (first %1))) (map strip-css))\n           names)]))\n\n(defn children\n  \"Normalize the children of a HTML element.\"\n  [x]\n  (->> (cond\n         (nil? x)\n         '()\n         (string? x)\n         (list x)\n\n         (util/element? x)\n         (list x)\n         (and (list? x) (symbol? (first x)))\n         (list x)\n\n         (list? x)\n         x\n\n         (and (sequential? x)\n              (= (count x) 1)\n              (sequential? (first x))\n              (not (string? (first x)))\n              (not (util/element? (first x))))\n         (children (first x))\n\n         (sequential? x)\n         x\n\n         :else (list x))\n       (remove nil?)))\n\n(defn- attrs?\n  \"Returns true if `x` are the attributes of an HTML element,\n  otherwise false.\"\n  [x]\n  (and (map? x)\n       ;; Server rendered Om.next components are also maps. They\n       ;; should NOT be treated as HTML element attributes.\n       #?(:clj (and (not (instance? om.dom.Element x))\n                    (not (instance? om.next.protocols.IReactComponent x))\n                    (not (satisfies? p/IReactComponent x))))))\n\n(defn element\n  \"Ensure an element vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when-not (or (keyword? tag)\n                (symbol? tag)\n                (string? tag))\n    (throw (ex-info (str tag \" is not a valid element name.\") {:tag tag :content content})))\n  (let [[tag id class] (match-tag tag)\n        tag-attrs (compact-map {:id id :class class})\n        map-attrs (first content)]\n    (if (attrs? map-attrs)\n      [tag\n       (merge-with-class tag-attrs map-attrs)\n       (children (next content))]\n      [tag\n       (attributes tag-attrs)\n       (children content)])))\n"]}