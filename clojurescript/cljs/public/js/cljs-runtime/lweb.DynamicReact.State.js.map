{"version":3,"file":"lweb.DynamicReact.State.js","sources":["lweb/DynamicReact/State.cljs"],"mappings":"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","names":["lweb.DynamicReact.State/SetAttrs","G__3106","lweb.DynamicReact.State/tempImage","lweb.DynamicReact.State/in?","cljs.core/keys","lweb.consts/projectList","category","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","lweb.DynamicReact.State/selectedOverlayImageNum","overlay_image_num","current_category","overlay_vertical_index","overlay","G__3110","lweb.DynamicReact.State/computeArrows","cljs.core/count","G__3109","G__3111","G__3108","cljs.core/not","lweb.DynamicReact.State/update-vals","map","mf","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lweb.DynamicReact.State/ToggleOverlay","state1","image","G__3096","lweb.DynamicReact.State/NavOverlayImage","direction","G__3113","lweb.DynamicReact.State/SetCategory","page","G__3095","NumberofVertical","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","lweb.DynamicReact.State/State","G__3152","fexpr__3151","G__3154","fexpr__3153","cljs.core/deref","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","G__3148","fexpr__3147","G__3150","fexpr__3149","lweb.DynamicReact.State/limits","lweb.consts/ArrayLimitsCalc","lweb.DynamicReact.State/SetPage","G__3175","fexpr__3174","G__3173","fexpr__3172","G__3171","fexpr__3170","cljs.core/reset!","attr","_","value","G__3140","fexpr__3139","G__3146","fexpr__3145","G__3144","fexpr__3143","G__3142","fexpr__3141","G__3128","fexpr__3127","G__3133","fexpr__3132","G__3135","fexpr__3134","G__3137","fexpr__3136","attrs","coll","elm","G__3160","fexpr__3159","cljs.core/dec","G__3156","fexpr__3155","G__3162","fexpr__3161","G__3158","fexpr__3157","js/lweb","js/lweb.DynamicReact","js/lweb.DynamicReact.State","js/lweb.DynamicReact.State.State","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p1__3085#","p2__3086#","cljs.core/vector?","G__3105","G__3183","fexpr__3182","G__3177","fexpr__3176","G__3181","fexpr__3180","G__3179","fexpr__3178","js/window","lweb.consts/HomeInitial","p1__3091#","cljs.core/some","G__3094","G__3115","G__3121","G__3120","G__3119","G__3117","lweb.DynamicReact.State/UpdateOverlayImage","lweb.DynamicReact.State/SetAttr","G__3093","G__3107","G__3118","lweb.consts/getImageById"],"sourcesContent":["(ns lweb.DynamicReact.State\n  (:require [rum.core :as rum]\n            [lweb.consts :as consts]\n            [clojure.string :as s]\n            ))\n\n(defonce State\n    (atom {:category \"ALL\"\n        :list consts/HomeInitial\n        :isTouch (< (.-innerWidth js/window) 1000)\n        :total 0\n        :page \"home\"\n        :touchmenu_active false\n        :introOn false\n        :overlay_vertical_index {}\n        :overlay_image_num 0\n        :overlay_image_src \"\"\n        :overlay_types []\n        :overlay_txt \"\"\n        :overlay {\n            :arrows {:left true :right true :up false :down false}\n            :state false\n            :image false\n            :video false\n        }\n    }))\n\n(defn update-vals [map mf]\n  (reduce #(update-in % [%2] (fn [_] (mf %2))) map (keys mf)))\n\n(defn SetAttr [attr, value]\n    (reset! State\n        (update-in @State [attr] (fn [_] value))\n    )\n)\n\n(defn SetAttrs [attrs]\n    (reset! State\n        (update-vals @State attrs)\n    )\n)\n\n(defn in? \n  \"true if coll contains elm\"\n  [coll elm]  \n  (some #(= elm %) coll))\n\n\n\n(defn computeArrows [overlay_image_num current_category overlay_vertical_index NumberofVertical]\n    (def limits (consts/ArrayLimitsCalc current_category))\n    {\n        :left (not (in? (limits :left) overlay_image_num))\n        :right (not (in? (limits :right) overlay_image_num))\n        :up (< (overlay_vertical_index :overlay_image_num) (- NumberofVertical 1))\n        :down (> (overlay_vertical_index :overlay_image_num) 0)\n    }\n)\n\n(defn selectedOverlayImageNum [overlay_image_num current_category overlay_vertical_index overlay]\n    (if (not current_category)\n        (SetAttrs {:overlay overlay :overlay_vertical_index overlay_vertical_index :overlay_image overlay_image_num})\n        (do\n            (def tempImage (consts/getImageById overlay_image_num))\n            (if (vector? (tempImage :img_src))\n                (SetAttrs {\n                    :overlay_vertical_index overlay_vertical_index\n                    :overlay_image_num overlay_image_num\n                    :overlay_image_src (get-in tempImage [:img_src (overlay_vertical_index overlay_image_num)])\n                    :overlay_thumb_src (get-in tempImage [:overlay_thumbs_src (overlay_vertical_index overlay_image_num)])\n                    :overlay_types (tempImage :types)\n                    :overlay_txt (tempImage :img_txt)\n                    :overlay {:state (overlay :state) :image (overlay :image) :is_video (tempImage :is_video) :arrows (computeArrows overlay_image_num current_category overlay_vertical_index (count (tempImage :img_src)))}\n                })\n                (SetAttrs {\n                    :overlay_vertical_index overlay_vertical_index\n                    :overlay_image_num overlay_image_num\n                    :overlay_image_src (tempImage :img_src)\n                    :overlay_thumb_src (tempImage :thumbs_src)\n                    :overlay_types (tempImage :types)\n                    :overlay_txt (tempImage :img_txt)\n                    :overlay {:state (overlay :state) :image (overlay :image) :is_video (tempImage :is_video) :arrows (computeArrows overlay_image_num current_category overlay_vertical_index 0)}\n                })\n            )\n        )\n    )\n)\n\n(defn NavOverlayImage [direction]\n    (cond\n        (= direction \"left\") (selectedOverlayImageNum (dec (@State :overlay_image_num)) (@State :category) (@State :overlay_vertical_index) (@State :overlay))\n        (= direction \"right\") (selectedOverlayImageNum (inc (@State :overlay_image_num)) (@State :category) (@State :overlay_vertical_index) (@State :overlay))\n        (= direction \"up\") (selectedOverlayImageNum (@State :overlay_image_num) (@State :category) ((update-in @State [:overlay_vertical_index :overlay_image_num] inc) :overlay_vertical_index) (@State :overlay))\n        (= direction \"down\") (selectedOverlayImageNum (@State :overlay_image_num) (@State :category) ((update-in @State [:overlay_vertical_index :overlay_image_num] dec) :overlay_vertical_index)  (@State :overlay))\n        :else \"Incorrect nav call\"\n    )\n)\n\n(defn UpdateOverlayImage [overlay_image_num]\n    (selectedOverlayImageNum overlay_image_num (@State :category) (@State :overlay_vertical_index) (@State :overlay))\n)\n\n(defn ToggleOverlay [state1, image]\n    (selectedOverlayImageNum (@State :overlay_image_num) (@State :category) (@State :overlay_vertical_index) (update-vals (@State :overlay) {:state state1 :image image}))\n)\n\n(defn SetCategory [category]\n    (SetAttrs {\n        :category category\n        :page \"portfolio\"\n        :list (if (in? (keys consts/projectList) category)\n            (consts/projectList category)\n            consts/HomeInitial\n        )})\n)\n\n(defn SetPage [page]\n    (SetAttrs {\n        :category \"\"\n        :page page\n    })\n)\n\n"]}