{"version":3,"file":"rum.core.js","sources":["rum/core.cljs"],"mappings":";;;;;;;;;AAaA;;;iBAAA,jBAAMA,0CAEHC;AAFH,AAGE,IAAAC,UAAU,AAASD;IAAnBE,UAAA;AAAA,AAAA,uBAAAD,QAAAC,xBAACC;;AAGH,wBAAA,xBAAMC,wDAASC,IAAIC;AAAnB,AACE,IAAAC,YAAA,AAAAC,cAAcF;IAAdG,cAAA;IAAAC,cAAA;IAAAC,UAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,UAAAD;AAAA,IAAAE,YAAA,AAAAH,iDAAAE;QAAA,AAAAE,4CAAAD,UAAA,IAAA,9DAASW;QAAT,AAAAV,4CAAAD,UAAA,IAAA,9DAAWY;AAAX,AAAA,GACc,EAAA,MAAA,LAAOA;AADrB,AAAA,AAEE,IAAAC,eAAUpB;IAAVqB,eAAc,AAACM,eAAKT;IAApBI,eAAuB,AAACM,qBAAQT;AAAhC,AAAA,gBAAAC,aAAAC,aAAAC,1CAACI;;AAFH;AAAA,cAAAxB;cAAAE;cAAAC;cAAA,CAAAC,UAAA;;;;;;;AAAA,cAAAJ;cAAAE;cAAAC;cAAA,CAAAC,UAAA;;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,gBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,cAAA,AAAAW,qBAAAX;cAAAS;cAAA,AAAAG,gBAAAH;cAAA;;;;;;;AAAA,IAAAI,YAAA,AAAAC,gBAAAd;QAAA,AAAAM,4CAAAO,UAAA,IAAA,9DAASG;QAAT,AAAAV,4CAAAO,UAAA,IAAA,9DAAWI;AAAX,AAAA,GACc,EAAA,MAAA,LAAOA;AADrB,AAAA,AAEE,IAAAI,eAAUvB;IAAVwB,eAAc,AAACG,eAAKT;IAApBO,eAAuB,AAACG,qBAAQT;AAAhC,AAAA,gBAAAI,aAAAC,aAAAC,1CAACC;;AAFH;AAAA,cAAA,AAAAT,eAAAf;cAAA;cAAA;cAAA;;;;;;;AAAA,cAAA,AAAAe,eAAAf;cAAA;cAAA;cAAA;;;;;;;;;AAAA;;;;;;AAKF,uBAAA,vBAAO2B,sDAAaC,OAAOC,OAAOC;AAAlC,AACE,IAAMC,OAAe,iBAAA,jBAACC,uEAAgBH;IAChCI,aAAe,uBAAA,mFAAA,iEAAA,3KAACC,wPAC0BL;IAC1CD,aAAeA;IACfO,cAAe,iBAAA,jBAACH,oFAAuBH;IACvCO,iBAAe,+CAAA,/CAACG;kBAADF,gBAAAC;AAAA,AAAS,QAAAA,gDAAAA,8CAAAD,mBAAAC,0BAAAD;;CAAQT,WAAOO;IACvCK,YAAe,uBAAA,mFAAA,8DAAA,xKAACN,qPACyBL;IACzCY,cAAe,iBAAA,jBAACT,oFAAuBH;IACvCa,gBAAe,iBAAA,jBAACV,yFAAyBH;IACzCc,cAAe,uBAAA,mFAAA,kEAAA,5KAACT,yPAC0BL;IAC1Ce,aAAe,uBAAA,mFAAA,kEAAA,5KAACV,yPACyBL;IACzCgB,YAAe,iBAAA,jBAACb,gFAAqBH;IACrCiB,eAAe,iBAAA,jBAACd,sFAAwBH;IACxCkB,gBAAe,iBAAA,jBAACf,yFAAyBH;IACzCmB,cAAe,AAACC,+CAAOC,gBAAM,iBAAA,jBAAClB,8FAA0BH;IACxDsB,eAAe,AAACF,+CAAOC,gBAAM,iBAAA,jBAAClB,gGAA2BH;IAEzDuB,OAAe;kBAAKrD;AAAL,AACE,YAAA,RAASsD;AAAT,AACE,IAAAC,eAAUD;IAAVE,eAAA;IAAAC,eAAA,gBAEO,8HAAI,sBAAA,tBAAC5D,gBAASG,9DACV,0FAAA,1FAAC0D,2KAA2BJ,lOAC5B,AAACK,yOAAS3B,uDAAKhC,zTACf4D;AALX,AAAA,gBAAAL,aAAAC,aAAAC,1CAAChC;;AAMD,OAAOoC,qBAAmBP,MAAKtD;;;IAClD8D,IAAe,AAACC,cAAcV,KAAKQ;IACnCG,YAAe,qBAAA,rBAACnE,gBAASwD;AA9B/B,AAgCE,GAAU,AAACY,uBAAO/B;AAAlB;AAAA,AACE,IAAAgC,eAAUF;IAAVG,eAAA;IAAAC,eACE;;AAAA,AACE,YAAA,RAASd;AAAT,AACE,OAAAe,8CAAA,kBAAA,AAAAC,xCAAQ,yDAAA,zDAAC7E,yDAAAA,1CAAM6D,yDAAAA,lDAAMiB,0DAASrC;;;AAHpC,AAAA,gBAAAgC,aAAAC,aAAAC,1CAAC3C;;;AAKH,GAAU,AAACwC,uBAAOxB;AAAlB;AAAA,AACE,IAAA+B,eAAUR;IAAVS,eAAA;IAAAC,eACE;;AAAA,AACE,YAAA,RAASpB;AAAT,AACE,OAAAe,8CAAA,kBAAA,AAAAC,xCAAQ,yDAAA,zDAAC7E,yDAAAA,1CAAM6D,yDAAAA,lDAAMiB,0DAAS9B;;;AAHpC,AAAA,gBAAA+B,aAAAC,aAAAC,1CAACjD;;;AAKH,IAAAkD,eAAUX;IAAVY,eAAA;IAAAC,eACE;kBAAKC;AAAL,AACE,YAAA,RAASxB;AAAT,AACE,gBAAA,AAAAyB,ZAAMC,4BAAY,AAACvF,eAAM6D;IACnB2B,QAAW,AAACC,uGAAMF,UACA,2BAAA,3BAACnF,gBAASiF;IAC5BK,aAAW,+CAAA,/CAAC3C;kBAAD4C,gBAAAC;AAAA,AAAS,QAAAA,gDAAAA,wDAAAD,mBAAAC,oCAAAD,jEAAIJ,uDAAAA;;CAAcC,MAAMvC;AAHlD,AAKE,sBAAA,fAAWY,+BAAuB,AAACM,yBAAUuB;;;AARrD,AAAA,gBAAAR,aAAAC,aAAAC,1CAACpD;;AAUD,GAAU,AAACwC,uBAAOtB;AAAlB;AAAA,AACE,IAAA2C,eAAUtB;IAAVuB,eAAA;IAAAC,eACE;kBAAKV,WAAWK;AAAhB,AACI,YAAA,RAAS7B;AAAT,AACE,gBAAA,AAAAyB,ZAAMC,4BAAW,AAACvF,eAAM6D;gBAAxB,AAAAyB,ZACMU,4BAAW,2BAAA,3BAAC5F,gBAASsF;AAD3B,AAEE,IAAAO,mBAAI,eAAA,fAACE;kBAADD;AAAA,AAAO,QAAAA,gDAAAA,qEAAAA,vBAAGX,iDAAAA,vCAAUS,iDAAAA;;CAAW9C;AAAnC,AAAA,oBAAA+C;AAAAA;;AAAA;;;;AALV,AAAA,gBAAAJ,aAAAC,aAAAC,1CAAC/D;;;AAOH,GAAU,AAACwC,uBAAOrB;AAAlB;AAAA,AACE,IAAAiD,eAAU7B;IAAV8B,eAAA;IAAAC,eACE;kBAAKjC,MAAEqB;AAAP,AACE,YAAA,RAAS7B;AAAT,AACE,IAAMmC,YAAU,2BAAA,3BAAC5F,gBAASsF;AAA1B,AACE,OAAAd,kCAAA,kBAAA,AAAAC,5BAAQmB,6CAAAA,nCAAUlB,8CAAS3B;;;AAJnC,AAAA,gBAAAiD,aAAAC,aAAAC,1CAACtE;;;AAMH,IAAAuE,eAAUhC;IAAViC,eAAA;IAAAC,eACE;;AAAA,AACE,YAAA,RAAS5C;AAAT,AACE,IAAM2B,QAAM,AAACxF,eAAM6D;IAAnB6C,YACuB,iBAAAE,UAAA,AAAAtB,gBAAiBE;AAAjB,AAAA,oGAAAoB,oCAAAA,hIAAChE,+CAAAA,wDAAAA;;UADxB,AAAA9B,4CAAA4F,UAAA,IAAA,hEACOC;iBADP,AAAA7F,4CAAA4F,UAAA,IAAA,vEACWhB;AADX,AAEE,AAACmB,uBAAQrB,MAAME;;AACfiB;;;AANR,AAAA,gBAAAJ,aAAAC,aAAAC,1CAACzE;;AAQD,GAAU,AAACwC,uBAAOpB;AAAlB;AAAA,AACE,IAAA0D,eAAUvC;IAAVwC,eAAA;IAAAC,eACE;kBAAK3C,MAAEA;AAAP,AACE,YAAA,RAASR;AAAT,AACE,OAAAe,8CAAA,kBAAA,AAAAC,xCAAQ,yDAAA,zDAAC7E,yDAAAA,1CAAM6D,yDAAAA,lDAAMiB,0DAAS1B;;;AAHpC,AAAA,gBAAA0D,aAAAC,aAAAC,1CAAChF;;;AAKH,GAAU,AAACwC,uBAAOnB;AAAlB;AAAA,AACE,IAAA4D,eAAU1C;IAAV2C,eAAA;IAAAC,eACE;kBAAKC,MAAMC;AAAX,AACE,YAAA,RAASxD;AAAT,AACE,AAAAe,8CAAA,uDAAA,AAAAC,0GAAA,2CAAA,lOAAQ,8FAAA,9FAAC7E,8FAAAA,/EAAM6D,8FAAAA,vFAAMK,+FAASb,4DAAU+D,iIAA4B,qBAAA,rBAAChH,gBAASiH;;AAC9E,OAAcxD;;;AAJpB,AAAA,gBAAAoD,aAAAC,aAAAC,1CAACnF;;;AAMH,IAAAsF,eAAU/C;IAAVgD,eAAA;IAAAC,eACE;;AAAA,AACE,YAAA,RAAS3D;AAAT,AACE,GAAU,AAACW,uBAAOlB;AAAlB;AAAA,AACE,AAAAsB,8CAAA,kBAAA,AAAAC,xCAAQ,yDAAA,zDAAC7E,yDAAAA,1CAAM6D,yDAAAA,lDAAMiB,0DAASxB;;;AAChC,6BAAA,kBAAA,xCAACtB,gBAAS6B;;;AALhB,AAAA,gBAAAyD,aAAAC,aAAAC,1CAACxF;;AAOD,GAAU,AAACwC,uBAAOjB;AAAlB;AAAA,AACE,IAAAkE,eAAUlD;IAAVmD,eAAA;IAAAC,eACE;;AAAA,AACE,YAAA,RAAS9D;AAAT,AACE,YAAA,AAAAyB,RAAME,wBAAO,AAACxF,eAAM6D;AAApB,AACE,OAAC3B,qBAAQ,AAAC0F,kDAAU,4CAAA,5CAACE;kBAADD;AAAA,AAAM,QAAAA,gDAAAA,uDAAAA,TAAGrC,mCAAAA;;kBAApB,hBAA4B9B,mDAASH;;;AAJtD,AAAA,gBAAAkE,aAAAC,aAAAC,1CAAC3F;;;AAMH,AAAC3B,sBAAQkE,UAAUf;;AACnB,qBAAA,rBAACxB,gBAAS4B,mBAAmBtB;;AAC7B,AAACjC,sBAAQuD,KAAKD;;AACdC;;AAGJ,sBAAA,tBAAOmE,oDAAY3F,OAAOC,OAAOC;AAAjC,AACE,IAAM0F,SAAO,AAAC7F,qBAAYC,OAAOC,OAAOC;IAClC2F,SAAO,AAAC3G,gBAAM,iBAAA,jBAACkB,0EAAgBH;IAC/BuB,OAAO,EAAI,EAAA,WAAA,VAAOqE,kBACT;;kCAAOC;AAAP,AACE,YAAA,wBAAA,2CAAA,3EAAM3H,qIAA6C2H,qBAC3B,AAACC,8CAAMF,OAAOC;AADtC,AAEE,OAACE,oBAAuBJ,OAAMzH;;;IAH3B2H;;;;EAAAA;;mCAAAA;;;IAAAA;yBAAAA;;;;;;CAIP;;kCAAOA;AAAP,AACE,YAAA,wBAAA,2CAAA,3EAAM3H,qIAA6C2H;AAAnD,AACE,OAACE,oBAAuBJ,OAAMzH;;;IAF3B2H;;;;EAAAA;;mCAAAA;;;IAAAA;yBAAAA;;;;;;;AAPtB,AAUE,gCAAA,2CAAA,pEAACG,oBAAUzE,6GAAkBoE;;AAGjC,sBAAA,tBAAMM,oDAAYC,YAAYlG,OAAOC;AAArC,AACE,GAAI,AAACkC,uBAAOnC;AACV,IAAM2F,SAAM,WAAKzH;AAAL,AACE,OAAC4H,8CAAMI,YAAY,OAAA,NAAMhI;;IACjC8D,IAAM,QAAA,PAAM2D,wBAAoB1F;IAChCsB,OAAM;;kCAAOsE;AAAP,AACE,kCAAA,3BAACE,oBAAuBJ,sBAAwBE;;;IAD3CA;;;;EAAAA;;mCAAAA;;;IAAAA;yBAAAA;;;;;;;AAHnB,AAKE,gCAAA,2CAAA,pEAACG,oBAAUzE,6GAAkBoE;;AAC/B,IAAM5F,SAAO,WAAKoD;AAAL,AAAA,0FAAa,AAAC2C,8CAAMI,YAAY,AAAA,wFAAW/C,QAAQA;;AAAhE,AACE,OAACuC,oBAAW3F,OAAOC,OAAOC;;;AAGhC,uBAAA,vBAAMkG,sDAAaD,YAAYlG,OAAOC;AAAtC,AACE,IAAMF,SAAO,WAAKoD;AAAL,AAAA,0FAAa,AAACiD,8CAAMF,YAAY/C,MAAM,AAAA,wFAAWA,QAAQA;;AAAtE,AACE,OAACuC,oBAAW3F,OAAOC,OAAOC;;AAG9B,uBAAA,vBAAMoG,sDAAaH,YAAYlG,OAAOC;AAAtC,AACE,IAAMF,SAAO,WAAKoD;AAAL,AAAA,0FAAa,AAACiD,8CAAMF,YAAY,AAAA,+GAAsB/C,OAAO,AAAA,wFAAWA,QAAQA;;AAA7F,AACE,OAACuC,oBAAW3F,OAAOC,OAAOC;;AAK9B,AAAeqG,oBACb,iBAAA1C,mBAAI,iBAAA4C,oBAAK,QAAAC;AAAL,AAAA,GAAAD;AACK,IAAA5C,mBAAI8C;AAAJ,AAAA,oBAAA9C;AAAAA;;AAAA,IAAAA,uBACI+C;AADJ,AAAA,oBAAA/C;AAAAA;;AAAA,IAAAA,uBAEIgD;AAFJ,AAAA,oBAAAhD;AAAAA;;AAGIiD;;;;;AAJTL;;;AAAJ,AAAA,oBAAA5C;AAAAA;;AAAA;kBAAA2C;AAAA,AAKG,kBAAAA,gBAAA,3BAACO;;;;;AAGN,AAAeC,iBACb,iBAAAnD,mBAAI,wCAAA,oCAAA,1EAAM,QAAAoD,8BAAyBC;AAAnC,AAAA,oBAAArD;AAAAA;;AAAA,IAAAA,uBACI,qCAAA,iCAAA,pEAAM,QAAAsD,2BAAsBC;AADhC,AAAA,oBAAAvD;AAAAA;;AAEI;kBAAKwD,EAAEC;AAAP,AAAU,QAACD,kCAAAA,qCAAAA,LAAEC,iBAAAA;;;;;;AAGnB,uBAAA,vBAAeC;AACf,AAAeC,wBAAa,AAACzF,yBAAUwF;AAGvC,sBAAA,tBAAOE,oDAAYC;AAAnB,AACE,IAAAC,YAAA,AAAAtJ,cAAaqJ;IAAbE,cAAA;IAAAC,cAAA;IAAAC,UAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,UAAAD;AAAA,WAAA,AAAAD,iDAAAE,xDAAQjK;AAAR,AAAA,GACc,AAACkK,cAAI,qBAAA,rBAAC/J,gBAASH;AAD7B,AAAA,AAEE,AAAcA;;AAFhB;AAAA,cAAA8J;cAAAC;cAAAC;cAAA,CAAAC,UAAA;;;;;;;AAAA,cAAAH;cAAAC;cAAAC;cAAA,CAAAC,UAAA;;;;;;;;AAAA,IAAAnJ,qBAAA,AAAAN,cAAAsJ;AAAA,AAAA,GAAAhJ;AAAA,AAAA,IAAAgJ,gBAAAhJ;AAAA,AAAA,GAAA,AAAAC,6BAAA+I;AAAA,IAAA9I,kBAAA,AAAAC,sBAAA6I;AAAA,AAAA,cAAA,AAAA5I,qBAAA4I;cAAA9I;cAAA,AAAAG,gBAAAH;cAAA;;;;;;;AAAA,WAAA,AAAAK,gBAAAyI,vBAAQ9J;AAAR,AAAA,GACc,AAACkK,cAAI,qBAAA,rBAAC/J,gBAASH;AAD7B,AAAA,AAEE,AAAcA;;AAFhB;AAAA,cAAA,AAAAsB,eAAAwI;cAAA;cAAA;cAAA;;;;;;;AAAA,cAAA,AAAAxI,eAAAwI;cAAA;cAAA;cAAA;;;;;;;;;AAAA;;;;;;AAKF,kBAAA,lBAAOK;AAAP,AACE,YAAA,AAAA9E,RAAMwE,wBAAOF;AAAb,AACE,AAAC/C,uBAAQ+C,sBAAaD;;AACtB,QAACP,+CAAAA,0EAAAA,7BAAMS,sDAAAA,lCAAWC,sDAAAA;;AAGtB;;;0BAAA,1BAAMO,4DAEHC;AAFH,AAGE,GAAM,uBAAA,AAAAhF,vBAACd,uCAAQoF;AAAf,AACE,CAACjB,kDAAAA,mEAAAA,nBAASyB,+CAAAA;;AADZ;;AAEA,OAAAxF,8CAAA,6CAAA,AAAAC,nEAAQ+E,oFAAAA,9DAAaW,qFAAKD;;AAG5B;;;iBAAA,jBAAME,0CAEHF,UAAUG;AAFb,AAGE,AAACC,gBAAmBJ,UAAUG;;AAHhC;;AAOA;;;mBAAA,nBAAME,8CAEHF;AAFH,AAGE,OAACG,gCAAmCH;;AAGtC;;;mBAAA,nBAAMI,8CAEHP,UAAUG;AAFb,AAGE,OAACK,iBAAoBR,UAAUG;;AAGjC;;;kBAAA,lBAAMM,4CAEHT,UAAUG;AAFb,AAGE,OAACO,sBAAyBV,UAAUG;;AAKtC;;;oBAAA,pBAAMQ,gDAEHX,UAAUY;AAFb,AAGE,oCAAA,eAAA,5CAACC,mBAAsBb,mBAAsBY;;AAG/C;;;oBAAA,pBAAME,gDAEHd,UAAUe;AAFb,AAGE,oCAAA,eAAA,5CAACF,mBAAsBb,mBAAsBe;;AAG/C;;;oBAAA,pBAAMC,gDAEH9F;AAFH,AAGE,OAAC+F,qBAAwB,AAAA,+GAAsB/F;;AAGjD;;;eAAA,fAAMgG,sCAEHhG,MAAM0F;AAFT,wHAGM1F,hHAA2B,CAAA,AAAA,sHAAA,/HAAc,wIAAM,AAACvD,eAAKiJ;;AAG3D;;;oBAAA,pBAAMO,gDAEHjG,MAAM0F;AAFT,AAGE,OAACK,qBAAwB,AAACC,aAAIhG,MAAM,AAACvD,eAAKiJ;;AAK5C;;;;mBAAA,2CAAA,9DAAKQ,sIAID,WAAKnG,UAAUS;AAAf,AACE,OAAC2F,gDAAK,AAAA,wFAAWpG,WAAW,AAAA,wFAAWS;;AAK7C,AAAA;;;;;iBAAA,yBAAA4F,1CAAME;AAAN,AAAA,IAAAD,UAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6CAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6CAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,+CAAA,/CAAMD,0DAIFE;AAJJ,AAIa,4DAAA,rDAACC,6CAAMD;;;AAJpB,AAAA,+CAAA,/CAAMF,0DAKFE,QAAQd;AALZ,AAAA,kDAAA,iEAOM,WAAK1F;AAAL,AACE,IAAM0G,cAAY,AAACC,6CAAKH;IAClB1B,YAAY,AAAA,+GAAsB9E;AADxC,AAEE,AAAC4G,oBAAUF,YAAYhB,IACrB;kBAAK7G,EAAEA,MAAEA,MAAEA;AAAX,AACE,OAACgG,wBAAeC;;;;AACpB,OAACrG,8CAAMuB,MAAM0F,IAAIgB;;;;AAb3B,AAAA,yCAAA,zCAAMJ;;AAAN,AAkBA,AAGA;;;oBAAA,2CAAA,/DAAKO,qHAGD,WAAK7G,MAAMjF;AAAX,AACE,2DAAA,pDAAC0D,8CAAMuB,gFAAwB,AAAC8G;GAJtC,mEAMI,WAAKC;AAAL,AACE,kBAAK/G;AAAL,AACE,IAAAgH,4BAAUC;AAAV,AAAA,AAAUA,iCAAY,yBAAA,zBAACtI;;AAAvB,IAAA,AACE,IAAMlE,OAAiB,AAAA,+GAAsBuF;IACvCmH,gBAAiB,AAAA,gHAAA,NAAoBnH;IAD3CkH,YAEuB,CAACH,0CAAAA,iDAAAA,TAAU/G,6BAAAA;UAFlC,AAAA1E,4CAAA4L,UAAA,IAAA,hEAEO/F;iBAFP,AAAA7F,4CAAA4L,UAAA,IAAA,vEAEWhH;oBAFX,AAAAJ,hBAGMsH,gCAAkBH;IAClBvB,MAAiB,AAAA,wGAAmB1F;AAJ1C,AAKE,IAAAqH,iBAAA,AAAApM,cAAYkM;IAAZG,mBAAA;IAAAC,mBAAA;IAAAC,eAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,eAAAD;AAAA,eAAA,AAAAD,sDAAAE,jEAAQ3B;AAAR,AAAA,AACE,GAAU,AAAC4B,0BAAUL,cAAcvB;AAAnC;AAAA,AACE,AAAC6B,uBAAa7B,SAAIH;;;AAFtB;AAAA,cAAA2B;cAAAC;cAAAC;cAAA,CAAAC,eAAA;;;;;;;AAAA,IAAAjM,0BAAA,AAAAN,cAAAoM;AAAA,AAAA,GAAA9L;AAAA,AAAA,IAAA8L,qBAAA9L;AAAA,AAAA,GAAA,AAAAC,6BAAA6L;AAAA,IAAA5L,uBAAA,AAAAC,sBAAA2L;AAAA,AAAA,cAAA,AAAA1L,qBAAA0L;cAAA5L;cAAA,AAAAG,gBAAAH;cAAA;;;;;;;AAAA,eAAA,AAAAK,gBAAAuL,3BAAQxB;AAAR,AAAA,AACE,GAAU,AAAC4B,0BAAUL,cAAcvB;AAAnC;AAAA,AACE,AAAC6B,uBAAa7B,SAAIH;;;AAFtB;AAAA,cAAA,AAAA3J,eAAAsL;cAAA;cAAA;cAAA;;;;;;;;AAAA;;;;;AAGA,IAAAM,iBAAA,AAAA1M,cAAYmM;IAAZQ,mBAAA;IAAAC,mBAAA;IAAAC,eAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,eAAAD;AAAA,eAAA,AAAAD,sDAAAE,jEAAQjC;AAAR,AAAA,AACE,GAAU,AAAC4B,0BAAUN,cAActB;AAAnC;AAAA,AACE,AAACe,oBAAUf,SAAIH,IACb;kBAAK7G,EAAEA,MAAEA,MAAEA;AAAX,AACE,OAACgG,wBAAepK;;;;;AAJxB;AAAA,cAAAkN;cAAAC;cAAAC;cAAA,CAAAC,eAAA;;;;;;;AAAA,IAAAvM,0BAAA,AAAAN,cAAA0M;AAAA,AAAA,GAAApM;AAAA,AAAA,IAAAoM,qBAAApM;AAAA,AAAA,GAAA,AAAAC,6BAAAmM;AAAA,IAAAlM,uBAAA,AAAAC,sBAAAiM;AAAA,AAAA,cAAA,AAAAhM,qBAAAgM;cAAAlM;cAAA,AAAAG,gBAAAH;cAAA;;;;;;;AAAA,eAAA,AAAAK,gBAAA6L,3BAAQ9B;AAAR,AAAA,AACE,GAAU,AAAC4B,0BAAUN,cAActB;AAAnC;AAAA,AACE,AAACe,oBAAUf,SAAIH,IACb;kBAAK7G,EAAEA,MAAEA,MAAEA;AAAX,AACE,OAACgG,wBAAepK;;;;;AAJxB;AAAA,cAAA,AAAAsB,eAAA4L;cAAA;cAAA;cAAA;;;;;;;;AAAA;;;;;AARF,0FAaGxG,IAAI,yDAAA,zDAAC1C,8CAAMyB,uFAA8BkH;UAd9C,AAAA,iCAAAJ,jCAAUC;;GARlB,qEAwBI,WAAKjH;AAAL,AACE,IAAM0F,WAAI,AAAA,wGAAmB1F;AAA7B,AACE,IAAA+H,iBAAA,AAAA9M,cAAY,AAAA,0GAAoB+E;IAAhCgI,mBAAA;IAAAC,mBAAA;IAAAC,eAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,eAAAD;AAAA,eAAA,AAAAD,sDAAAE,jEAAQrC;AAAR,AAAA,AACE,AAAC6B,uBAAa7B,SAAIH;;AADpB;AAAA,cAAAqC;cAAAC;cAAAC;cAAA,CAAAC,eAAA;;;;;;;AAAA,IAAA3M,0BAAA,AAAAN,cAAA8M;AAAA,AAAA,GAAAxM;AAAA,AAAA,IAAAwM,qBAAAxM;AAAA,AAAA,GAAA,AAAAC,6BAAAuM;AAAA,IAAAtM,uBAAA,AAAAC,sBAAAqM;AAAA,AAAA,cAAA,AAAApM,qBAAAoM;cAAAtM;cAAA,AAAAG,gBAAAH;cAAA;;;;;;;AAAA,eAAA,AAAAK,gBAAAiM,3BAAQlC;AAAR,AAAA,AACE,AAAC6B,uBAAa7B,SAAIH;;AADpB;AAAA,cAAA,AAAA3J,eAAAgM;cAAA;cAAA;cAAA;;;;;;;;AAAA;;;;;AAEF,mEAAA,8HAAA,1LAACI,sDAAOnI;;AAGd;;;;;iBAAA,jBAAMoI,0CAIHvC;AAJH,AAKE,oBAAQoB;AAAR;AAAA,AAAA,MAAA,KAAAV,MAAA,CAAA,kBAAA,yEAAA,KAAA;;;AACA,AAAAnH,uDAAA,6CAAA,AAAAC,5EAAQ4H,6FAAAA,9DAAYlC,8FAAKc;;AAN3B,OAAA/F,gBAOG+F;;AAKH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAwBwC,wBAkCtBC;AAKF,AAAA;;;;;;;;;;;;;;;qBAAA,6BAAAlC,lDAAMwC;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,yBAAA,AAAA;AAAA,AAAA,IAAAC,uBAAA;;AAAA,AAAA,GAAA,CAAAA,uBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,cAAA,CAAAA,uBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,0DAAA,oBAAAC,TAcGhD,IAAIwD;AAdP,AAAA,IAAAP,YAAAD;IAAAC,gBAAA,EAAA,EAAA,EAAA,CAAAA,aAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,gDAAA,WAAA,CAAAC,gCAAA,AAAAD,8BAAA,KAAA,OAAA,QAAA,AAAAnG,8CAAAqG,mBAAAF,WAAAA;cAAAA,VAcmBQ;AAdnB,AAeE,GAAI,gBAAWC,fAAc1D;AAC3B,YAAA0D,kBAAgB,AAAO1D,QAAK,AAAC2D,6CAAK,AAAQ3D,SAAKwD,MAAM,AAAA,mFAAOC;;AAC5D,YAAAC,kBAAgB1D,IAAIwD,KAAK,AAAA,mFAAOC;;;;AAjBpC,AAAA,AAAAV,6CAAA;;AAAA;AAAA,AAAA,AAAAA,uCAAA,WAAAK;AAAA,AAAA,IAAAC,UAAA,AAAApN,gBAAAmN;IAAAA,cAAA,AAAAlN,eAAAkN;IAAAE,UAAA,AAAArN,gBAAAmN;IAAAA,cAAA,AAAAlN,eAAAkN;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,QAAAC,QAAAF;;;AAAA,AAoBA,AAAA;;;kBAAA,0BAAA7C,5CAAMqD;AAAN,AAAA,IAAAlB,qBAAA;AAAA,AAAA,IAAAC,yBAAA,AAAA;AAAA,AAAA,IAAAC,uBAAA;;AAAA,AAAA,GAAA,CAAAA,uBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,cAAA,CAAAA,uBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAkB,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAf;;;AAAA,AAAA,AAAA,AAAAe,uDAAA,WAEG5D,IAAIH,IAAM4D;AAFb,AAGE,4EAAA,rEAACO,8CAAMjB,mBAAU/C,uFAAKH,YAAK4D;;;AAH7B,AAAA,AAAAG,0CAAA;;AAAA;AAAA,AAAA,AAAAA,oCAAA,WAAAC;AAAA,AAAA,IAAAC,UAAA,AAAA7N,gBAAA4N;IAAAA,cAAA,AAAA3N,eAAA2N;IAAAE,UAAA,AAAA9N,gBAAA4N;IAAAA,cAAA,AAAA3N,eAAA2N;AAAA,AAAA,IAAAN,qBAAA;AAAA,AAAA,OAAAA,wDAAAO,QAAAC,QAAAF;;;AAAA","names":["rum.core/state","comp","G__2884","G__2885","goog.object/get","rum.core/extend!","obj","props","seq__2886","cljs.core/seq","chunk__2888","count__2889","i__2890","vec__2892","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4947__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__2898","cljs.core/first","cljs.core/next","k","v","G__2895","G__2896","G__2897","G__2901","G__2902","G__2903","goog.object/set","cljs.core/name","cljs.core/clj->js","rum.core/build-class","render","mixins","display-name","init","rum.util/collect","will-mount","rum.util/collect*","wrap-render","wrapped-render","p1__2931#","p2__2930#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","did-mount","did-remount","should-update","will-update","did-update","did-catch","will-unmount","child-context","class-props","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","static-props","ctor","this","G__2936","G__2937","G__2938","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","rum.util.call_all.cljs$core$IFn$_invoke$arity$variadic","cljs.core/volatile!","js/React.Component","_","goog/inherits","prototype","cljs.core/empty?","G__2939","G__2940","G__2941","cljs.core/-vreset!","cljs.core/-deref","rum.util/call-all","G__2942","G__2943","G__2944","G__2945","G__2946","G__2947","next-props","cljs.core/deref","old-state","state","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","next-state","p1__2933#","p2__2932#","G__2948","G__2949","G__2950","new-state","or__4453__auto__","p1__2934#","cljs.core/some","G__2951","G__2952","G__2953","G__2954","G__2955","G__2956","vec__2957","dom","G__2960","cljs.core/vreset!","G__2961","G__2962","G__2963","G__2964","G__2965","G__2966","error","info","G__2967","G__2968","G__2969","G__2970","G__2971","G__2972","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","p1__2935#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","rum.core/build-ctor","class","key-fn","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/React.createElement","cljs.core/with-meta","rum.core/build-defc","render-body","rum.core/build-defcs","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","rum.core/build-defcc","rum.core/schedule","p1__3015#","and__4442__auto__","js/window","js/window.requestAnimationFrame","js/window.webkitRequestAnimationFrame","js/window.mozRequestAnimationFrame","js/window.msRequestAnimationFrame","js/setTimeout","rum.core/batch","js/ReactNative","js/ReactNative.unstable_batchedUpdates","js/ReactDOM","js/ReactDOM.unstable_batchedUpdates","f","a","rum.core/empty-queue","rum.core/render-queue","rum.core/render-all","queue","seq__3016","chunk__3018","count__3019","i__3020","cljs.core/not","rum.core/render","rum.core/request-render","component","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","rum.core/mount","node","js/ReactDOM.render","rum.core/unmount","js/ReactDOM.unmountComponentAtNode","rum.core/hydrate","js/ReactDOM.hydrate","rum.core/portal","js/ReactDOM.createPortal","rum.core/with-key","key","js/React.cloneElement","rum.core/with-ref","ref","rum.core/dom-node","js/ReactDOM.findDOMNode","rum.core/ref","rum.core/ref-node","rum.core/static","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","var_args","G__3043","rum.core/local","js/Error","initial","rum.core.local.cljs$core$IFn$_invoke$arity$2","local-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","rum.core/reactive","cljs.core/random-uuid","render-fn","*reactions*3045","rum.core/*reactions*","vec__3046","old-reactions","new-reactions","seq__3049","chunk__3050","count__3051","i__3052","cljs.core/contains?","cljs.core/remove-watch","seq__3053","chunk__3054","count__3055","i__3056","seq__3057","chunk__3058","count__3059","i__3060","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","rum.core/react","rum.core/derived-atom","rum.derived-atom/derived-atom","args__5146__auto__","len__5143__auto__","i__5144__auto__","argseq__5147__auto__","cljs.core/IndexedSeq","rum.core/cursor-in","p__3128","map__3129","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq3125","G__3126","G__3127","self__5128__auto__","path","options","rum.cursor/Cursor","cljs.core.into.cljs$core$IFn$_invoke$arity$2","rum.core/cursor","seq3134","G__3135","G__3136","cljs.core.apply.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns rum.core\n  (:refer-clojure :exclude [ref])\n  (:require-macros rum.core)\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [sablono.core]\n    [rum.cursor :as cursor]\n    [rum.util :as util :refer [collect collect* call-all]]\n    [rum.derived-atom :as derived-atom]))\n\n\n(defn state\n  \"Given React component, returns Rum state associated with it\"\n  [comp]\n  (gobj/get (.-state comp) \":rum/state\"))\n\n\n(defn extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj/set obj (name k) (clj->js v))))\n\n\n(defn- build-class [render mixins display-name]\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        will-mount     (collect* [:will-mount               ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-remount    (collect   :did-remount mixins)      ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        will-update    (collect* [:will-update              ;; state -> state\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                           (gobj/set this \"state\"\n                             #js {\":rum/state\"\n                                  (-> (gobj/get props \":rum/initial-state\")\n                                      (assoc :rum/react-component this)\n                                      (call-all init props)\n                                      volatile!)})\n                           (.call js/React.Component this props)))\n        _              (goog/inherits ctor js/React.Component)\n        prototype      (gobj/get ctor \"prototype\")]\n\n    (when-not (empty? will-mount)\n      (gobj/set prototype \"componentWillMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all will-mount)))))\n\n    (when-not (empty? did-mount)\n      (gobj/set prototype \"componentDidMount\"\n        (fn []\n          (this-as this\n            (vswap! (state this) call-all did-mount)))))\n\n    (gobj/set prototype \"componentWillReceiveProps\"\n      (fn [next-props]\n        (this-as this\n          (let [old-state  @(state this)\n                state      (merge old-state\n                                  (gobj/get next-props \":rum/initial-state\"))\n                next-state (reduce #(%2 old-state %1) state did-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n            (.setState this #js {\":rum/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj/set prototype \"shouldComponentUpdate\"\n        (fn [next-props next-state]\n            (this-as this\n              (let [old-state @(state this)\n                    new-state @(gobj/get next-state \":rum/state\")]\n                (or (some #(% old-state new-state) should-update) false))))))\n    \n    (when-not (empty? will-update)\n      (gobj/set prototype \"componentWillUpdate\"\n        (fn [_ next-state]\n          (this-as this\n            (let [new-state (gobj/get next-state \":rum/state\")]\n              (vswap! new-state call-all will-update))))))\n    \n    (gobj/set prototype \"render\"\n      (fn []\n        (this-as this\n          (let [state (state this)\n                [dom next-state] (wrapped-render @state)]\n            (vreset! state next-state)\n            dom))))\n\n    (when-not (empty? did-update)\n      (gobj/set prototype \"componentDidUpdate\"\n        (fn [_ _]\n          (this-as this\n            (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj/set prototype \"componentDidCatch\"\n        (fn [error info]\n          (this-as this\n            (vswap! (state this) call-all did-catch error {:rum/component-stack (gobj/get info \"componentStack\")})\n            (.forceUpdate this)))))\n\n    (gobj/set prototype \"componentWillUnmount\"\n      (fn []\n        (this-as this\n          (when-not (empty? will-unmount)\n            (vswap! (state this) call-all will-unmount))\n          (gobj/set this \":rum/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj/set prototype \"getChildContext\"\n        (fn []\n          (this-as this\n            (let [state @(state this)]\n              (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n    \n    (extend! prototype class-props)\n    (gobj/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }\n                                     \"key\" (apply key-fn args) }]\n                     (js/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js { \":rum/initial-state\" { :rum/args args }}] \n                     (js/React.createElement class props))))]\n    (with-meta ctor { :rum/class class })))\n\n\n(defn build-defc [render-body mixins display-name]\n  (if (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (js/React.createElement class #js { \":rum/args\" args }))]\n      (with-meta ctor { :rum/class class }))\n    (let [render (fn [state] [(apply render-body (:rum/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n\n(defn build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n\n(defn build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum/react-component state) (:rum/args state)) state])] \n    (build-ctor render mixins display-name)))\n\n\n;; render queue\n\n(def ^:private schedule\n  (or (and (exists? js/window)\n           (or js/window.requestAnimationFrame\n               js/window.webkitRequestAnimationFrame\n               js/window.mozRequestAnimationFrame\n               js/window.msRequestAnimationFrame))\n    #(js/setTimeout % 16)))\n\n\n(def ^:private batch\n  (or (when (exists? js/ReactNative) js/ReactNative.unstable_batchedUpdates)\n      (when (exists? js/ReactDOM) js/ReactDOM.unstable_batchedUpdates)\n      (fn [f a] (f a))))\n\n\n(def ^:private empty-queue [])\n(def ^:private render-queue (volatile! empty-queue))\n\n\n(defn- render-all [queue]\n  (doseq [comp queue\n          :when (not (gobj/get comp \":rum/unmounted?\"))]\n    (.forceUpdate comp)))\n\n\n(defn- render []\n  (let [queue @render-queue]\n    (vreset! render-queue empty-queue)\n    (batch render-all queue)))\n\n\n(defn request-render\n  \"Schedules react component to be rendered on next animation frame\"\n  [component]\n  (when (empty? @render-queue)\n    (schedule render))\n  (vswap! render-queue conj component))\n\n\n(defn mount\n  \"Add component to the DOM tree. Idempotent. Subsequent mounts will just update component\"\n  [component node]\n  (js/ReactDOM.render component node)\n  nil)\n\n\n(defn unmount\n  \"Removes component from the DOM tree\"\n  [node]\n  (js/ReactDOM.unmountComponentAtNode node))\n\n\n(defn hydrate\n  \"Hydrates server rendered DOM tree with provided component.\"\n  [component node]\n  (js/ReactDOM.hydrate component node))\n\n\n(defn portal\n  \"Render `component` in a DOM `node` that might be ouside of current DOM hierarchy\"\n  [component node]\n  (js/ReactDOM.createPortal component node))\n\n\n;; initialization\n\n(defn with-key\n  \"Adds React key to component\"\n  [component key]\n  (js/React.cloneElement component #js { \"key\" key } nil))\n\n\n(defn with-ref\n  \"Adds React ref (string or callback) to component\"\n  [component ref]\n  (js/React.cloneElement component #js { \"ref\" ref } nil))\n\n\n(defn dom-node\n  \"Given state, returns top-level DOM node. Can\u2019t be called during render\"\n  [state]\n  (js/ReactDOM.findDOMNode (:rum/react-component state)))\n\n\n(defn ref\n  \"Given state and ref handle, returns React component\"\n  [state key]\n  (-> state :rum/react-component (aget \"refs\") (aget (name key))))\n\n\n(defn ref-node\n  \"Given state and ref handle, returns DOM node associated with ref\"\n  [state key]\n  (js/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed.\n   Does equality check (=) on all arguments\"\n  { :should-update\n    (fn [old-state new-state]\n      (not= (:rum/args old-state) (:rum/args new-state))) })\n\n\n;; local mixin\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff\n   during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default\"\n  ([initial] (local initial :rum/local))\n  ([initial key]\n    { :will-mount\n      (fn [state]\n        (let [local-state (atom initial)\n              component   (:rum/react-component state)]\n          (add-watch local-state key\n            (fn [_ _ _ _]\n              (request-render component)))\n          (assoc state key local-state))) }))\n\n\n;; reactive mixin\n\n(def ^:private ^:dynamic *reactions*)\n\n\n(def reactive\n  \"Mixin. Works in conjunction with `rum.core/react`\"\n  { :init\n    (fn [state props]\n      (assoc state :rum.reactive/key (random-uuid)))\n    :wrap-render\n    (fn [render-fn]\n      (fn [state]\n        (binding [*reactions* (volatile! #{})]\n          (let [comp             (:rum/react-component state)\n                old-reactions    (:rum.reactive/refs state #{})\n                [dom next-state] (render-fn state)\n                new-reactions    @*reactions*\n                key              (:rum.reactive/key state)]\n            (doseq [ref old-reactions]\n              (when-not (contains? new-reactions ref)\n                (remove-watch ref key)))\n            (doseq [ref new-reactions]\n              (when-not (contains? old-reactions ref)\n                (add-watch ref key\n                  (fn [_ _ _ _]\n                    (request-render comp)))))\n            [dom (assoc next-state :rum.reactive/refs new-reactions)]))))\n    :will-unmount\n    (fn [state]\n      (let [key (:rum.reactive/key state)]\n        (doseq [ref (:rum.reactive/refs state)]\n          (remove-watch ref key)))\n      (dissoc state :rum.reactive/refs :rum.reactive/key)) })\n\n\n(defn react\n  \"Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core/react is only supported in conjunction with rum.core/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n(def ^{:style/indent 2} derived-atom\n  \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n   `derived-atom` will:\n    - Take N \u201csource\u201d refs\n    - Set up a watch on each of them\n    - Create \u201csink\u201d atom\n    - When any of source refs changes:\n       - re-run function `f`, passing N dereferenced values of source refs\n       - `reset!` result of `f` to the sink atom\n    - return sink atom\n\n    (def *a (atom 0))\n    (def *b (atom 1))\n    (def *x (derived-atom [*a *b] ::key\n              (fn [a b]\n                (str a \\\":\\\" b))))\n    (type *x) ;; => clojure.lang.Atom\n    \\\\@*x     ;; => 0:1\n    (swap! *a inc)\n    \\\\@*x     ;; => 1:1\n    (reset! *b 7)\n    \\\\@*x     ;; => 1:7\n\n   Arguments:\n     refs - sequence of source refs\n     key  - unique key to register watcher, see `clojure.core/add-watch`\n     f    - function that must accept N arguments (same as number of source refs)\n            and return a value to be written to the sink ref.\n            Note: `f` will be called with already dereferenced values\n     opts - optional. Map of:\n       :ref           - Use this as sink ref. By default creates new atom\n       :check-equals? - Do an equality check on each update: `(= @sink (f new-vals))`.\n                        If result of `f` is equal to the old one, do not call `reset!`.\n                        Defaults to `true`. Set to false if calling `=` would be expensive\"\n  derived-atom/derived-atom)\n\n\n;; cursors\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \\\"Ivan\\\"]))\n     \\\\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\\\@db ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n     (swap! db update-in [:users \\\"Ivan\\\" :age] inc) ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n     \\\\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor/Cursor ref)\n    (cursor/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor/Cursor. ref path (:meta options))))\n\n\n(defn cursor\n  \"Same as `rum.core/cursor-in` but accepts single key instead of path vector\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n"]}