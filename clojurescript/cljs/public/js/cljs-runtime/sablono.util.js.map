{"version":3,"file":"sablono.util.js","sources":["sablono/util.cljc"],"mappings":"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","names":["cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/name","x","x__4797__auto__","m__4798__auto__","sablono/util.to-str","goog/typeOf","cljs.core/missing-protocol","sablono.util/ToString","_","k","cljs/core.Keyword","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","first-word","vec__3761","seq__3762","cljs.core/seq","first__3763","cljs.core/first","cljs.core/next","words","m","or__4453__auto__","sablono.util/html-to-dom-attrs","xs","goog/Uri","cljs.core/Keyword","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","v","p__3768","vec__3769","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sablono.util/camel-case","attrs","var_args","args__5146__auto__","len__5143__auto__","i__5144__auto__","argseq__5147__auto__","cljs.core/IndexedSeq","sablono.util/as-str","seq3736","self__5129__auto__","cljs.core/map?","sablono.util/join-classes","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","G__3772","cljs.core.update.cljs$core$IFn$_invoke$arity$3","sablono.util/camel-case-keys","classes","cljs.core/vector?","cljs.core/empty?","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","cljs.core/Symbol","sablono.util/element?","cljs.core/re-matches","base","clojure.set/rename-keys","clojure.string.join.cljs$core$IFn$_invoke$arity$2","sablono.util/to-uri","sablono.util/*base-url*","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","sablono.util/to-str","cljs.core/not","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","goog.object/set","sablono.util/ToURI","G__3792","G__3793","G__3794","sablono/util.to-uri","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core/nil?","G__3773","G__3774","G__3775","G__3776","G__3777","G__3778","G__3779","G__3780","G__3781"],"sourcesContent":["(ns sablono.util\n  #?(:cljs (:import goog.Uri))\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defprotocol ToString\n  (to-str [x] \"Convert a value into a string.\"))\n\n(defprotocol ToURI\n  (to-uri [x] \"Convert a value into a URI.\"))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (str/join (map to-str xs)))\n\n(defn camel-case\n  \"Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.\"\n  [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (.split (name k) \"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join\n            keyword)))\n    k))\n\n(defn camel-case-keys\n  \"Recursively transforms all map keys into camel case.\"\n  [m]\n  (if (map? m)\n    (let [m (into {}\n                  (map (fn [[k v]] [(camel-case k) v]))\n                  m)]\n      (cond-> m\n        (map? (:style m))\n        (update :style camel-case-keys)))\n    m))\n\n(defn element?\n  \"Return true if `x` is an HTML element. True when `x` is a vector\n  and the first element is a keyword, e.g. `[:div]` or `[:div [:span \\\"x\\\"]`.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(defn html-to-dom-attrs\n  \"Converts all HTML attributes to their DOM equivalents.\"\n  [attrs]\n  (rename-keys (camel-case-keys attrs)\n               {:class :className\n                :for :htmlFor}))\n\n(defn join-classes\n  \"Join the `classes` with a whitespace.\"\n  [classes]\n  (->> classes\n       (into [] (comp\n                 (mapcat (fn [x] (if (string? x) [x] (seq x))))\n                 (remove nil?)))\n       (str/join \" \")))\n\n#?(:cljs\n   (extend-protocol ToString\n     cljs.core.Keyword\n     (to-str [x]\n       (name x))\n     goog.Uri\n     (to-str [x]\n       (if (or (. x (hasDomain))\n               (nil? (. x (getPath)))\n               (not (re-matches #\"^/.*\" (. x (getPath)))))\n         (str x)\n         (let [base (str *base-url*)]\n           (if (re-matches #\".*/$\" base)\n             (str (subs base 0 (dec (count base))) x)\n             (str base x)))))\n     nil\n     (to-str [_]\n       \"\")\n     number\n     (to-str [x]\n       (str x))\n     default\n     (to-str [x]\n       (str x))))\n\n#?(:cljs\n   (extend-protocol ToURI\n     Uri\n     (to-uri [x] x)\n     default\n     (to-uri [x] (Uri. (str x)))))\n"]}