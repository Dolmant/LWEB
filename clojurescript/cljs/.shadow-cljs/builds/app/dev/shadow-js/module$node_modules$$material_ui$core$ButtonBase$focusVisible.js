["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@material-ui/core/ButtonBase/focusVisible.js"],"~:js","shadow$provide.module$node_modules$$material_ui$core$ButtonBase$focusVisible=function(global,process,require,module,exports,shadow$shims){function detectFocusVisible(instance,element,callback){var attempt=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1;(0,_warning.default)(instance.focusVisibleCheckTime,\"Material-UI: missing instance.focusVisibleCheckTime.\");(0,_warning.default)(instance.focusVisibleMaxCheckTimes,\"Material-UI: missing instance.focusVisibleMaxCheckTimes.\");instance.focusVisibleTimeout=\nsetTimeout(function(){var doc=(0,_ownerDocument.default)(element);internal.focusKeyPressed&&(doc.activeElement===element||element.contains(doc.activeElement))?callback():attempt<instance.focusVisibleMaxCheckTimes&&detectFocusVisible(instance,element,callback,attempt+1)},instance.focusVisibleCheckTime)}function isFocusKey(event){return-1<FOCUS_KEYS.indexOf((0,_keycode.default)(event))}global=require(\"module$node_modules$$babel$runtime$helpers$builtin$interopRequireDefault\");Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports.detectFocusVisible=detectFocusVisible;exports.listenForFocusKeys=function(win){win.addEventListener(\"keyup\",handleKeyUpEvent)};var _keycode=global(require(\"module$node_modules$keycode$index\")),_warning=global(require(\"module$node_modules$warning$warning\")),_ownerDocument=global(require(\"module$node_modules$$material_ui$core$utils$ownerDocument\")),internal={focusKeyPressed:!1,keyUpEventTimeout:-1},FOCUS_KEYS=\"tab enter space esc up down left right\".split(\" \"),handleKeyUpEvent=\nfunction(event){isFocusKey(event)&&(internal.focusKeyPressed=!0,clearTimeout(internal.keyUpEventTimeout),internal.keyUpEventTimeout=setTimeout(function(){internal.focusKeyPressed=!1},1E3))}}","~:source","shadow$provide[\"module$node_modules$$material_ui$core$ButtonBase$focusVisible\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFocusVisible = detectFocusVisible;\nexports.listenForFocusKeys = listenForFocusKeys;\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"../utils/ownerDocument\"));\n\n//  weak\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = (0, _ownerDocument.default)(element);\n\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n}\n\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\n\nfunction isFocusKey(event) {\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 1e3);\n  }\n};\n\nfunction listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$builtin$interopRequireDefault","~$shadow.js","~$module$node_modules$warning$warning","~$module$node_modules$$material_ui$core$utils$ownerDocument","~$module$node_modules$keycode$index"]],"~:properties",["^5",["focusVisibleTimeout","keyUpEventTimeout","listenForFocusKeys","__esModule","value","focusKeyPressed","detectFocusVisible"]],"~:compiled-at",1534230902312,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$material_ui$core$ButtonBase$focusVisible.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAuB/IC,QAASA,mBAAkB,CAACC,QAAD,CAAWC,OAAX,CAAoBC,QAApB,CAA8B,CACvD,IAAIC,QAA6B,CAAnB,CAAAC,SAAAC,OAAA,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,CAC1C,EAAC,CAAA,CAAGG,QAAAC,QAAJ,EAAsBR,QAAAS,sBAAtB,CAAsD,sDAAtD,CACA,EAAC,CAAA,CAAGF,QAAAC,QAAJ,EAAsBR,QAAAU,0BAAtB,CAA0D,0DAA1D,CACxCV,SAAAW,oBAAA;AAA+BC,UAAA,CAAW,QAAS,EAAG,CACpD,IAAIC,IAAM,CAAC,CAAA,CAAGC,cAAAN,QAAJ,EAA4BP,OAA5B,CAENc,SAAAC,gBAAJ,GAAiCH,GAAAI,cAAjC,GAAuDhB,OAAvD,EAAkEA,OAAAiB,SAAA,CAAiBL,GAAAI,cAAjB,CAAlE,EACEf,QAAA,EADF,CAEWC,OAFX,CAEqBH,QAAAU,0BAFrB,EAGEX,kBAAA,CAAmBC,QAAnB,CAA6BC,OAA7B,CAAsCC,QAAtC,CAAgDC,OAAhD,CAA0D,CAA1D,CANkD,CAAvB,CAQ5BH,QAAAS,sBAR4B,CAJwB,CAiBzDU,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzB,MAA2D,EAA3D,CAAOC,UAAAC,QAAA,CAAmB,CAAC,CAAA,CAAGC,QAAAf,QAAJ,EAAsBY,KAAtB,CAAnB,CADkB,CArCvBI,MAAAA,CAAyB7B,OAAA,CAAQ,0EAAR,CAE7B8B,OAAAC,eAAA,CAAsB7B,OAAtB;AAA+B,YAA/B,CAA6C,CAC3C8B,MAAO,CAAA,CADoC,CAA7C,CAGA9B,QAAAE,mBAAA,CAA6BA,kBAC7BF,QAAA+B,mBAAA,CA8CAA,QAA2B,CAACC,GAAD,CAAM,CAI/BA,GAAAC,iBAAA,CAAqB,OAArB,CAA8BC,gBAA9B,CAJ+B,CA5CjC,KAAIR,SAAWC,MAAA,CAAuB7B,OAAA,CAAQ,mCAAR,CAAvB,CAAf,CAEIY,SAAWiB,MAAA,CAAuB7B,OAAA,CAAQ,qCAAR,CAAvB,CAFf,CAIImB,eAAiBU,MAAA,CAAuB7B,OAAA,CAAQ,2DAAR,CAAvB,CAJrB,CAOIoB,SAAW,CACbC,gBAAiB,CAAA,CADJ,CAEbgB,kBAAoB,EAFP,CAPf,CA2BIX,WAAa,wCAAA,MAAA,CAAA,GAAA,CA3BjB,CAiCIU;AAAmBA,QAAyB,CAACX,KAAD,CAAQ,CAClDD,UAAA,CAAWC,KAAX,CAAJ,GACEL,QAAAC,gBAGA,CAH2B,CAAA,CAG3B,CADAiB,YAAA,CAAalB,QAAAiB,kBAAb,CACA,CAAAjB,QAAAiB,kBAAA,CAA6BpB,UAAA,CAAW,QAAS,EAAG,CAClDG,QAAAC,gBAAA,CAA2B,CAAA,CADuB,CAAvB,CAE1B,GAF0B,CAJ/B,CADsD,CA5CuF;\",\n\"sources\":[\"node_modules/@material-ui/core/ButtonBase/focusVisible.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$material_ui$core$ButtonBase$focusVisible\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/builtin/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.detectFocusVisible = detectFocusVisible;\\nexports.listenForFocusKeys = listenForFocusKeys;\\n\\nvar _keycode = _interopRequireDefault(require(\\\"keycode\\\"));\\n\\nvar _warning = _interopRequireDefault(require(\\\"warning\\\"));\\n\\nvar _ownerDocument = _interopRequireDefault(require(\\\"../utils/ownerDocument\\\"));\\n\\n//  weak\\nvar internal = {\\n  focusKeyPressed: false,\\n  keyUpEventTimeout: -1\\n};\\n\\nfunction detectFocusVisible(instance, element, callback) {\\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\\n  instance.focusVisibleTimeout = setTimeout(function () {\\n    var doc = (0, _ownerDocument.default)(element);\\n\\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\\n      callback();\\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\\n      detectFocusVisible(instance, element, callback, attempt + 1);\\n    }\\n  }, instance.focusVisibleCheckTime);\\n}\\n\\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\\n\\nfunction isFocusKey(event) {\\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\\n}\\n\\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\\n  if (isFocusKey(event)) {\\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\\n\\n    clearTimeout(internal.keyUpEventTimeout);\\n    internal.keyUpEventTimeout = setTimeout(function () {\\n      internal.focusKeyPressed = false;\\n    }, 1e3);\\n  }\\n};\\n\\nfunction listenForFocusKeys(win) {\\n  // The event listener will only be added once per window.\\n  // Duplicate event listeners will be ignored by addEventListener.\\n  // Also, this logic is client side only, we don't need a teardown.\\n  win.addEventListener('keyup', handleKeyUpEvent);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"detectFocusVisible\",\"instance\",\"element\",\"callback\",\"attempt\",\"arguments\",\"length\",\"undefined\",\"_warning\",\"default\",\"focusVisibleCheckTime\",\"focusVisibleMaxCheckTimes\",\"focusVisibleTimeout\",\"setTimeout\",\"doc\",\"_ownerDocument\",\"internal\",\"focusKeyPressed\",\"activeElement\",\"contains\",\"isFocusKey\",\"event\",\"FOCUS_KEYS\",\"indexOf\",\"_keycode\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"listenForFocusKeys\",\"win\",\"addEventListener\",\"handleKeyUpEvent\",\"keyUpEventTimeout\",\"clearTimeout\"]\n}\n"]